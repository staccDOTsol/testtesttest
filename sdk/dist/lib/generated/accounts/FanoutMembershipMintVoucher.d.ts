/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
/// <reference types="node" />
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * Arguments used to create {@link FanoutMembershipMintVoucher}
 * @category Accounts
 * @category generated
 */
export type FanoutMembershipMintVoucherArgs = {
    fanout: web3.PublicKey;
    fanoutMint: web3.PublicKey;
    lastInflow: beet.bignum;
    bumpSeed: number;
};
/**
 * Holds the data for the {@link FanoutMembershipMintVoucher} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export declare class FanoutMembershipMintVoucher implements FanoutMembershipMintVoucherArgs {
    readonly fanout: web3.PublicKey;
    readonly fanoutMint: web3.PublicKey;
    readonly lastInflow: beet.bignum;
    readonly bumpSeed: number;
    private constructor();
    /**
     * Creates a {@link FanoutMembershipMintVoucher} instance from the provided args.
     */
    static fromArgs(args: FanoutMembershipMintVoucherArgs): FanoutMembershipMintVoucher;
    /**
     * Deserializes the {@link FanoutMembershipMintVoucher} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset?: number): [FanoutMembershipMintVoucher, number];
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link FanoutMembershipMintVoucher} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(connection: web3.Connection, address: web3.PublicKey): Promise<FanoutMembershipMintVoucher>;
    /**
     * Deserializes the {@link FanoutMembershipMintVoucher} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf: Buffer, offset?: number): [FanoutMembershipMintVoucher, number];
    /**
     * Serializes the {@link FanoutMembershipMintVoucher} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize(): [Buffer, number];
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link FanoutMembershipMintVoucher}
     */
    static get byteSize(): number;
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link FanoutMembershipMintVoucher} data from rent
     *
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(connection: web3.Connection, commitment?: web3.Commitment): Promise<number>;
    /**
     * Determines if the provided {@link Buffer} has the correct byte size to
     * hold {@link FanoutMembershipMintVoucher} data.
     */
    static hasCorrectByteSize(buf: Buffer, offset?: number): boolean;
    /**
     * Returns a readable version of {@link FanoutMembershipMintVoucher} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty(): {
        fanout: string;
        fanoutMint: string;
        lastInflow: any;
        bumpSeed: number;
    };
}
/**
 * @category Accounts
 * @category generated
 */
export declare const fanoutMembershipMintVoucherBeet: beet.BeetStruct<FanoutMembershipMintVoucher, FanoutMembershipMintVoucherArgs & {
    accountDiscriminator: number[];
}>;
//# sourceMappingURL=FanoutMembershipMintVoucher.d.ts.map