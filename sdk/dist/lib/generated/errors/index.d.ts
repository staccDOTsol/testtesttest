/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
type ErrorWithCode = Error & {
    code: number;
};
type MaybeErrorWithCode = ErrorWithCode | null | undefined;
/**
 * BadArtithmetic: 'Encountered an arithmetic error'
 *
 * @category Errors
 * @category generated
 */
export declare class BadArtithmeticError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidAuthority: 'Invalid authority'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidAuthorityError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InsufficientShares: 'Not Enough Available Shares'
 *
 * @category Errors
 * @category generated
 */
export declare class InsufficientSharesError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * SharesArentAtMax: 'All available shares must be assigned to a member'
 *
 * @category Errors
 * @category generated
 */
export declare class SharesArentAtMaxError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NewMintAccountRequired: 'A New mint account must be provided'
 *
 * @category Errors
 * @category generated
 */
export declare class NewMintAccountRequiredError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * MintAccountRequired: 'A Token type Fanout requires a Membership Mint'
 *
 * @category Errors
 * @category generated
 */
export declare class MintAccountRequiredError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidMembershipModel: 'Invalid Membership Model'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidMembershipModelError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidMembershipVoucher: 'Invalid Membership Voucher'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidMembershipVoucherError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * MintDoesNotMatch: 'Invalid Mint for the config'
 *
 * @category Errors
 * @category generated
 */
export declare class MintDoesNotMatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidHoldingAccount: 'Holding account does not match the config'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidHoldingAccountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * HoldingAccountMustBeAnATA: 'A Mint holding account must be an ata for the mint owned by the config'
 *
 * @category Errors
 * @category generated
 */
export declare class HoldingAccountMustBeAnATAError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * DerivedKeyInvalid: ''
 *
 * @category Errors
 * @category generated
 */
export declare class DerivedKeyInvalidError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * IncorrectOwner: ''
 *
 * @category Errors
 * @category generated
 */
export declare class IncorrectOwnerError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * WalletDoesNotOwnMembershipToken: 'Wallet Does not Own Membership Token'
 *
 * @category Errors
 * @category generated
 */
export declare class WalletDoesNotOwnMembershipTokenError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidMetadata: 'The Metadata specified is not valid Token Metadata'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidMetadataError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NumericalOverflow: ''
 *
 * @category Errors
 * @category generated
 */
export declare class NumericalOverflowError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InsufficientBalanceToDistribute: 'Not enough new balance to distribute'
 *
 * @category Errors
 * @category generated
 */
export declare class InsufficientBalanceToDistributeError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidFanoutForMint: ''
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidFanoutForMintError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * MustDistribute: 'This operation must be the instruction right after a distrobution on the same accounts.'
 *
 * @category Errors
 * @category generated
 */
export declare class MustDistributeError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidStakeAta: ''
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidStakeAtaError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CannotTransferToSelf: ''
 *
 * @category Errors
 * @category generated
 */
export declare class CannotTransferToSelfError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TransferNotSupported: 'Transfer is not supported on this membership model'
 *
 * @category Errors
 * @category generated
 */
export declare class TransferNotSupportedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * RemoveNotSupported: 'Remove is not supported on this membership model'
 *
 * @category Errors
 * @category generated
 */
export declare class RemoveNotSupportedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * RemoveSharesMustBeZero: 'Before you remove a wallet or NFT member please transfer the shares to another member'
 *
 * @category Errors
 * @category generated
 */
export declare class RemoveSharesMustBeZeroError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidCloseAccountDestination: 'Sending Sol to a SPL token destination will render the sol unusable'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidCloseAccountDestinationError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export declare function errorFromCode(code: number): MaybeErrorWithCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export declare function errorFromName(name: string): MaybeErrorWithCode;
export {};
//# sourceMappingURL=index.d.ts.map