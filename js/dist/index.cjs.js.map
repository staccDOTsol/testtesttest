{"version":3,"file":"index.cjs.js","sources":["../node_modules/superstruct/dist/index.mjs","../src/constants.ts","../src/utils/math.ts","../src/utils/program-address.ts","../src/layouts.ts","../src/utils/stake.ts","../src/utils/instruction.ts","../src/utils/index.ts","../src/instructions.ts","../src/index.ts"],"sourcesContent":["/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nclass StructError extends TypeError {\n    constructor(failure, failures) {\n        let cached;\n        const { message, explanation, ...rest } = failure;\n        const { path } = failure;\n        const msg = path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`;\n        super(explanation ?? msg);\n        if (explanation != null)\n            this.cause = msg;\n        Object.assign(this, rest);\n        this.name = this.constructor.name;\n        this.failures = () => {\n            return (cached ?? (cached = [failure, ...failures()]));\n        };\n    }\n}\n\n/**\n * Check if a value is an iterator.\n */\nfunction isIterable(x) {\n    return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isObject(x) {\n    return typeof x === 'object' && x != null;\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isPlainObject(x) {\n    if (Object.prototype.toString.call(x) !== '[object Object]') {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(x);\n    return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\nfunction print(value) {\n    if (typeof value === 'symbol') {\n        return value.toString();\n    }\n    return typeof value === 'string' ? JSON.stringify(value) : `${value}`;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\nfunction shiftIterator(input) {\n    const { done, value } = input.next();\n    return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\nfunction toFailure(result, context, struct, value) {\n    if (result === true) {\n        return;\n    }\n    else if (result === false) {\n        result = {};\n    }\n    else if (typeof result === 'string') {\n        result = { message: result };\n    }\n    const { path, branch } = context;\n    const { type } = struct;\n    const { refinement, message = `Expected a value of type \\`${type}\\`${refinement ? ` with refinement \\`${refinement}\\`` : ''}, but received: \\`${print(value)}\\``, } = result;\n    return {\n        value,\n        type,\n        refinement,\n        key: path[path.length - 1],\n        path,\n        branch,\n        ...result,\n        message,\n    };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\nfunction* toFailures(result, context, struct, value) {\n    if (!isIterable(result)) {\n        result = [result];\n    }\n    for (const r of result) {\n        const failure = toFailure(r, context, struct, value);\n        if (failure) {\n            yield failure;\n        }\n    }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\nfunction* run(value, struct, options = {}) {\n    const { path = [], branch = [value], coerce = false, mask = false } = options;\n    const ctx = { path, branch };\n    if (coerce) {\n        value = struct.coercer(value, ctx);\n        if (mask &&\n            struct.type !== 'type' &&\n            isObject(struct.schema) &&\n            isObject(value) &&\n            !Array.isArray(value)) {\n            for (const key in value) {\n                if (struct.schema[key] === undefined) {\n                    delete value[key];\n                }\n            }\n        }\n    }\n    let status = 'valid';\n    for (const failure of struct.validator(value, ctx)) {\n        failure.explanation = options.message;\n        status = 'not_valid';\n        yield [failure, undefined];\n    }\n    for (let [k, v, s] of struct.entries(value, ctx)) {\n        const ts = run(v, s, {\n            path: k === undefined ? path : [...path, k],\n            branch: k === undefined ? branch : [...branch, v],\n            coerce,\n            mask,\n            message: options.message,\n        });\n        for (const t of ts) {\n            if (t[0]) {\n                status = t[0].refinement != null ? 'not_refined' : 'not_valid';\n                yield [t[0], undefined];\n            }\n            else if (coerce) {\n                v = t[1];\n                if (k === undefined) {\n                    value = v;\n                }\n                else if (value instanceof Map) {\n                    value.set(k, v);\n                }\n                else if (value instanceof Set) {\n                    value.add(v);\n                }\n                else if (isObject(value)) {\n                    if (v !== undefined || k in value)\n                        value[k] = v;\n                }\n            }\n        }\n    }\n    if (status !== 'not_valid') {\n        for (const failure of struct.refiner(value, ctx)) {\n            failure.explanation = options.message;\n            status = 'not_refined';\n            yield [failure, undefined];\n        }\n    }\n    if (status === 'valid') {\n        yield [undefined, value];\n    }\n}\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\nclass Struct {\n    constructor(props) {\n        const { type, schema, validator, refiner, coercer = (value) => value, entries = function* () { }, } = props;\n        this.type = type;\n        this.schema = schema;\n        this.entries = entries;\n        this.coercer = coercer;\n        if (validator) {\n            this.validator = (value, context) => {\n                const result = validator(value, context);\n                return toFailures(result, context, this, value);\n            };\n        }\n        else {\n            this.validator = () => [];\n        }\n        if (refiner) {\n            this.refiner = (value, context) => {\n                const result = refiner(value, context);\n                return toFailures(result, context, this, value);\n            };\n        }\n        else {\n            this.refiner = () => [];\n        }\n    }\n    /**\n     * Assert that a value passes the struct's validation, throwing if it doesn't.\n     */\n    assert(value, message) {\n        return assert(value, this, message);\n    }\n    /**\n     * Create a value with the struct's coercion logic, then validate it.\n     */\n    create(value, message) {\n        return create(value, this, message);\n    }\n    /**\n     * Check if a value passes the struct's validation.\n     */\n    is(value) {\n        return is(value, this);\n    }\n    /**\n     * Mask a value, coercing and validating it, but returning only the subset of\n     * properties defined by the struct's schema.\n     */\n    mask(value, message) {\n        return mask(value, this, message);\n    }\n    /**\n     * Validate a value with the struct's validation logic, returning a tuple\n     * representing the result.\n     *\n     * You may optionally pass `true` for the `withCoercion` argument to coerce\n     * the value before attempting to validate it. If you do, the result will\n     * contain the coerced result when successful.\n     */\n    validate(value, options = {}) {\n        return validate(value, this, options);\n    }\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\nfunction assert(value, struct, message) {\n    const result = validate(value, struct, { message });\n    if (result[0]) {\n        throw result[0];\n    }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\nfunction create(value, struct, message) {\n    const result = validate(value, struct, { coerce: true, message });\n    if (result[0]) {\n        throw result[0];\n    }\n    else {\n        return result[1];\n    }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\nfunction mask(value, struct, message) {\n    const result = validate(value, struct, { coerce: true, mask: true, message });\n    if (result[0]) {\n        throw result[0];\n    }\n    else {\n        return result[1];\n    }\n}\n/**\n * Check if a value passes a struct.\n */\nfunction is(value, struct) {\n    const result = validate(value, struct);\n    return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\nfunction validate(value, struct, options = {}) {\n    const tuples = run(value, struct, options);\n    const tuple = shiftIterator(tuples);\n    if (tuple[0]) {\n        const error = new StructError(tuple[0], function* () {\n            for (const t of tuples) {\n                if (t[0]) {\n                    yield t[0];\n                }\n            }\n        });\n        return [error, undefined];\n    }\n    else {\n        const v = tuple[1];\n        return [undefined, v];\n    }\n}\n\nfunction assign(...Structs) {\n    const isType = Structs[0].type === 'type';\n    const schemas = Structs.map((s) => s.schema);\n    const schema = Object.assign({}, ...schemas);\n    return isType ? type(schema) : object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\nfunction define(name, validator) {\n    return new Struct({ type: name, schema: null, validator });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\nfunction deprecated(struct, log) {\n    return new Struct({\n        ...struct,\n        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n        validator(value, ctx) {\n            if (value === undefined) {\n                return true;\n            }\n            else {\n                log(value, ctx);\n                return struct.validator(value, ctx);\n            }\n        },\n    });\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\nfunction dynamic(fn) {\n    return new Struct({\n        type: 'dynamic',\n        schema: null,\n        *entries(value, ctx) {\n            const struct = fn(value, ctx);\n            yield* struct.entries(value, ctx);\n        },\n        validator(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.validator(value, ctx);\n        },\n        coercer(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.coercer(value, ctx);\n        },\n        refiner(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.refiner(value, ctx);\n        },\n    });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\nfunction lazy(fn) {\n    let struct;\n    return new Struct({\n        type: 'lazy',\n        schema: null,\n        *entries(value, ctx) {\n            struct ?? (struct = fn());\n            yield* struct.entries(value, ctx);\n        },\n        validator(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.validator(value, ctx);\n        },\n        coercer(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.coercer(value, ctx);\n        },\n        refiner(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.refiner(value, ctx);\n        },\n    });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\nfunction omit(struct, keys) {\n    const { schema } = struct;\n    const subschema = { ...schema };\n    for (const key of keys) {\n        delete subschema[key];\n    }\n    switch (struct.type) {\n        case 'type':\n            return type(subschema);\n        default:\n            return object(subschema);\n    }\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\nfunction partial(struct) {\n    const isStruct = struct instanceof Struct;\n    const schema = isStruct ? { ...struct.schema } : { ...struct };\n    for (const key in schema) {\n        schema[key] = optional(schema[key]);\n    }\n    if (isStruct && struct.type === 'type') {\n        return type(schema);\n    }\n    return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\nfunction pick(struct, keys) {\n    const { schema } = struct;\n    const subschema = {};\n    for (const key of keys) {\n        subschema[key] = schema[key];\n    }\n    switch (struct.type) {\n        case 'type':\n            return type(subschema);\n        default:\n            return object(subschema);\n    }\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\nfunction struct(name, validator) {\n    console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n    return define(name, validator);\n}\n\n/**\n * Ensure that any value passes validation.\n */\nfunction any() {\n    return define('any', () => true);\n}\nfunction array(Element) {\n    return new Struct({\n        type: 'array',\n        schema: Element,\n        *entries(value) {\n            if (Element && Array.isArray(value)) {\n                for (const [i, v] of value.entries()) {\n                    yield [i, v, Element];\n                }\n            }\n        },\n        coercer(value) {\n            return Array.isArray(value) ? value.slice() : value;\n        },\n        validator(value) {\n            return (Array.isArray(value) ||\n                `Expected an array value, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a bigint.\n */\nfunction bigint() {\n    return define('bigint', (value) => {\n        return typeof value === 'bigint';\n    });\n}\n/**\n * Ensure that a value is a boolean.\n */\nfunction boolean() {\n    return define('boolean', (value) => {\n        return typeof value === 'boolean';\n    });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\nfunction date() {\n    return define('date', (value) => {\n        return ((value instanceof Date && !isNaN(value.getTime())) ||\n            `Expected a valid \\`Date\\` object, but received: ${print(value)}`);\n    });\n}\nfunction enums(values) {\n    const schema = {};\n    const description = values.map((v) => print(v)).join();\n    for (const key of values) {\n        schema[key] = key;\n    }\n    return new Struct({\n        type: 'enums',\n        schema,\n        validator(value) {\n            return (values.includes(value) ||\n                `Expected one of \\`${description}\\`, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a function.\n */\nfunction func() {\n    return define('func', (value) => {\n        return (typeof value === 'function' ||\n            `Expected a function, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\nfunction instance(Class) {\n    return define('instance', (value) => {\n        return (value instanceof Class ||\n            `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is an integer.\n */\nfunction integer() {\n    return define('integer', (value) => {\n        return ((typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n            `Expected an integer, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value matches all of a set of types.\n */\nfunction intersection(Structs) {\n    return new Struct({\n        type: 'intersection',\n        schema: null,\n        *entries(value, ctx) {\n            for (const S of Structs) {\n                yield* S.entries(value, ctx);\n            }\n        },\n        *validator(value, ctx) {\n            for (const S of Structs) {\n                yield* S.validator(value, ctx);\n            }\n        },\n        *refiner(value, ctx) {\n            for (const S of Structs) {\n                yield* S.refiner(value, ctx);\n            }\n        },\n    });\n}\nfunction literal(constant) {\n    const description = print(constant);\n    const t = typeof constant;\n    return new Struct({\n        type: 'literal',\n        schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n        validator(value) {\n            return (value === constant ||\n                `Expected the literal \\`${description}\\`, but received: ${print(value)}`);\n        },\n    });\n}\nfunction map(Key, Value) {\n    return new Struct({\n        type: 'map',\n        schema: null,\n        *entries(value) {\n            if (Key && Value && value instanceof Map) {\n                for (const [k, v] of value.entries()) {\n                    yield [k, k, Key];\n                    yield [k, v, Value];\n                }\n            }\n        },\n        coercer(value) {\n            return value instanceof Map ? new Map(value) : value;\n        },\n        validator(value) {\n            return (value instanceof Map ||\n                `Expected a \\`Map\\` object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that no value ever passes validation.\n */\nfunction never() {\n    return define('never', () => false);\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\nfunction nullable(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx) => value === null || struct.validator(value, ctx),\n        refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n    });\n}\n/**\n * Ensure that a value is a number.\n */\nfunction number() {\n    return define('number', (value) => {\n        return ((typeof value === 'number' && !isNaN(value)) ||\n            `Expected a number, but received: ${print(value)}`);\n    });\n}\nfunction object(schema) {\n    const knowns = schema ? Object.keys(schema) : [];\n    const Never = never();\n    return new Struct({\n        type: 'object',\n        schema: schema ? schema : null,\n        *entries(value) {\n            if (schema && isObject(value)) {\n                const unknowns = new Set(Object.keys(value));\n                for (const key of knowns) {\n                    unknowns.delete(key);\n                    yield [key, value[key], schema[key]];\n                }\n                for (const key of unknowns) {\n                    yield [key, value[key], Never];\n                }\n            }\n        },\n        validator(value) {\n            return (isObject(value) || `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return isObject(value) ? { ...value } : value;\n        },\n    });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\nfunction optional(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    });\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\nfunction record(Key, Value) {\n    return new Struct({\n        type: 'record',\n        schema: null,\n        *entries(value) {\n            if (isObject(value)) {\n                for (const k in value) {\n                    const v = value[k];\n                    yield [k, k, Key];\n                    yield [k, v, Value];\n                }\n            }\n        },\n        validator(value) {\n            return (isObject(value) || `Expected an object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\nfunction regexp() {\n    return define('regexp', (value) => {\n        return value instanceof RegExp;\n    });\n}\nfunction set(Element) {\n    return new Struct({\n        type: 'set',\n        schema: null,\n        *entries(value) {\n            if (Element && value instanceof Set) {\n                for (const v of value) {\n                    yield [v, v, Element];\n                }\n            }\n        },\n        coercer(value) {\n            return value instanceof Set ? new Set(value) : value;\n        },\n        validator(value) {\n            return (value instanceof Set ||\n                `Expected a \\`Set\\` object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a string.\n */\nfunction string() {\n    return define('string', (value) => {\n        return (typeof value === 'string' ||\n            `Expected a string, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\nfunction tuple(Structs) {\n    const Never = never();\n    return new Struct({\n        type: 'tuple',\n        schema: null,\n        *entries(value) {\n            if (Array.isArray(value)) {\n                const length = Math.max(Structs.length, value.length);\n                for (let i = 0; i < length; i++) {\n                    yield [i, value[i], Structs[i] || Never];\n                }\n            }\n        },\n        validator(value) {\n            return (Array.isArray(value) ||\n                `Expected an array, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\nfunction type(schema) {\n    const keys = Object.keys(schema);\n    return new Struct({\n        type: 'type',\n        schema,\n        *entries(value) {\n            if (isObject(value)) {\n                for (const k of keys) {\n                    yield [k, value[k], schema[k]];\n                }\n            }\n        },\n        validator(value) {\n            return (isObject(value) || `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return isObject(value) ? { ...value } : value;\n        },\n    });\n}\n/**\n * Ensure that a value matches one of a set of types.\n */\nfunction union(Structs) {\n    const description = Structs.map((s) => s.type).join(' | ');\n    return new Struct({\n        type: 'union',\n        schema: null,\n        coercer(value) {\n            for (const S of Structs) {\n                const [error, coerced] = S.validate(value, { coerce: true });\n                if (!error) {\n                    return coerced;\n                }\n            }\n            return value;\n        },\n        validator(value, ctx) {\n            const failures = [];\n            for (const S of Structs) {\n                const [...tuples] = run(value, S, ctx);\n                const [first] = tuples;\n                if (!first[0]) {\n                    return [];\n                }\n                else {\n                    for (const [failure] of tuples) {\n                        if (failure) {\n                            failures.push(failure);\n                        }\n                    }\n                }\n            }\n            return [\n                `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(value)}`,\n                ...failures,\n            ];\n        },\n    });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\nfunction unknown() {\n    return define('unknown', () => true);\n}\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction coerce(struct, condition, coercer) {\n    return new Struct({\n        ...struct,\n        coercer: (value, ctx) => {\n            return is(value, condition)\n                ? struct.coercer(coercer(value, ctx), ctx)\n                : struct.coercer(value, ctx);\n        },\n    });\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction defaulted(struct, fallback, options = {}) {\n    return coerce(struct, unknown(), (x) => {\n        const f = typeof fallback === 'function' ? fallback() : fallback;\n        if (x === undefined) {\n            return f;\n        }\n        if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n            const ret = { ...x };\n            let changed = false;\n            for (const key in f) {\n                if (ret[key] === undefined) {\n                    ret[key] = f[key];\n                    changed = true;\n                }\n            }\n            if (changed) {\n                return ret;\n            }\n        }\n        return x;\n    });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction trimmed(struct) {\n    return coerce(struct, string(), (x) => x.trim());\n}\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\nfunction empty(struct) {\n    return refine(struct, 'empty', (value) => {\n        const size = getSize(value);\n        return (size === 0 ||\n            `Expected an empty ${struct.type} but received one with a size of \\`${size}\\``);\n    });\n}\nfunction getSize(value) {\n    if (value instanceof Map || value instanceof Set) {\n        return value.size;\n    }\n    else {\n        return value.length;\n    }\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\nfunction max(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, 'max', (value) => {\n        return exclusive\n            ? value < threshold\n            : value <= threshold ||\n                `Expected a ${struct.type} less than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\nfunction min(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, 'min', (value) => {\n        return exclusive\n            ? value > threshold\n            : value >= threshold ||\n                `Expected a ${struct.type} greater than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a string, array, map or set is not empty.\n */\nfunction nonempty(struct) {\n    return refine(struct, 'nonempty', (value) => {\n        const size = getSize(value);\n        return (size > 0 || `Expected a nonempty ${struct.type} but received an empty one`);\n    });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\nfunction pattern(struct, regexp) {\n    return refine(struct, 'pattern', (value) => {\n        return (regexp.test(value) ||\n            `Expected a ${struct.type} matching \\`/${regexp.source}/\\` but received \"${value}\"`);\n    });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\nfunction size(struct, min, max = min) {\n    const expected = `Expected a ${struct.type}`;\n    const of = min === max ? `of \\`${min}\\`` : `between \\`${min}\\` and \\`${max}\\``;\n    return refine(struct, 'size', (value) => {\n        if (typeof value === 'number' || value instanceof Date) {\n            return ((min <= value && value <= max) ||\n                `${expected} ${of} but received \\`${value}\\``);\n        }\n        else if (value instanceof Map || value instanceof Set) {\n            const { size } = value;\n            return ((min <= size && size <= max) ||\n                `${expected} with a size ${of} but received one with a size of \\`${size}\\``);\n        }\n        else {\n            const { length } = value;\n            return ((min <= length && length <= max) ||\n                `${expected} with a length ${of} but received one with a length of \\`${length}\\``);\n        }\n    });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\nfunction refine(struct, name, refiner) {\n    return new Struct({\n        ...struct,\n        *refiner(value, ctx) {\n            yield* struct.refiner(value, ctx);\n            const result = refiner(value, ctx);\n            const failures = toFailures(result, ctx, struct, value);\n            for (const failure of failures) {\n                yield { ...failure, refinement: name };\n            }\n        },\n    });\n}\n\nexport { Struct, StructError, any, array, assert, assign, bigint, boolean, coerce, create, date, defaulted, define, deprecated, dynamic, empty, enums, func, instance, integer, intersection, is, lazy, literal, map, mask, max, min, never, nonempty, nullable, number, object, omit, optional, partial, pattern, pick, record, refine, regexp, set, size, string, struct, trimmed, tuple, type, union, unknown, validate };\n//# sourceMappingURL=index.mjs.map\n","import { Buffer } from 'buffer';\nimport { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';\n\n// Public key that identifies the metadata program.\nexport const METADATA_PROGRAM_ID = new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');\nexport const METADATA_MAX_NAME_LENGTH = 32;\nexport const METADATA_MAX_SYMBOL_LENGTH = 10;\nexport const METADATA_MAX_URI_LENGTH = 200;\n\n// Public key that identifies the SPL Stake Pool program.\nexport const STAKE_POOL_PROGRAM_ID = new PublicKey('SPoo1Ku8WFXoNDMHPsrGSTSG1Y47rzgn41SLUNakuHy');\n\n// Maximum number of validators to update during UpdateValidatorListBalance.\nexport const MAX_VALIDATORS_TO_UPDATE = 5;\n\n// Seed for ephemeral stake account\nexport const EPHEMERAL_STAKE_SEED_PREFIX = Buffer.from('ephemeral');\n\n// Seed used to derive transient stake accounts.\nexport const TRANSIENT_STAKE_SEED_PREFIX = Buffer.from('transient');\n\n// Minimum amount of staked SOL required in a validator stake account to allow\n// for merges without a mismatch on credits observed\nexport const MINIMUM_ACTIVE_STAKE = LAMPORTS_PER_SOL;\n","import BN from 'bn.js';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nexport function solToLamports(amount: number): number {\n  if (isNaN(amount)) return Number(0);\n  return Number(amount * LAMPORTS_PER_SOL);\n}\n\nexport function lamportsToSol(lamports: number | BN | bigint): number {\n  if (typeof lamports === 'number') {\n    return Math.abs(lamports) / LAMPORTS_PER_SOL;\n  }\n  if (typeof lamports === 'bigint') {\n    return Math.abs(Number(lamports)) / LAMPORTS_PER_SOL;\n  }\n\n  let signMultiplier = 1;\n  if (lamports.isNeg()) {\n    signMultiplier = -1;\n  }\n\n  const absLamports = lamports.abs();\n  const lamportsString = absLamports.toString(10).padStart(10, '0');\n  const splitIndex = lamportsString.length - 9;\n  const solString = lamportsString.slice(0, splitIndex) + '.' + lamportsString.slice(splitIndex);\n  return signMultiplier * parseFloat(solString);\n}\n","import { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { Buffer } from 'buffer';\nimport {\n  METADATA_PROGRAM_ID,\n  EPHEMERAL_STAKE_SEED_PREFIX,\n  TRANSIENT_STAKE_SEED_PREFIX,\n} from '../constants';\n\n/**\n * Generates the withdraw authority program address for the stake pool\n */\nexport async function findWithdrawAuthorityProgramAddress(\n  programId: PublicKey,\n  stakePoolAddress: PublicKey,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [stakePoolAddress.toBuffer(), Buffer.from('withdraw')],\n    programId,\n  );\n  return publicKey;\n}\n\n/**\n * Generates the stake program address for a validator's vote account\n */\nexport async function findStakeProgramAddress(\n  programId: PublicKey,\n  voteAccountAddress: PublicKey,\n  stakePoolAddress: PublicKey,\n  seed?: number,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [\n      voteAccountAddress.toBuffer(),\n      stakePoolAddress.toBuffer(),\n      seed ? new BN(seed).toArrayLike(Buffer, 'le', 4) : Buffer.alloc(0),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n\n/**\n * Generates the stake program address for a validator's vote account\n */\nexport async function findTransientStakeProgramAddress(\n  programId: PublicKey,\n  voteAccountAddress: PublicKey,\n  stakePoolAddress: PublicKey,\n  seed: BN,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [\n      TRANSIENT_STAKE_SEED_PREFIX,\n      voteAccountAddress.toBuffer(),\n      stakePoolAddress.toBuffer(),\n      seed.toArrayLike(Buffer, 'le', 8),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n\n/**\n * Generates the ephemeral program address for stake pool redelegation\n */\nexport async function findEphemeralStakeProgramAddress(\n  programId: PublicKey,\n  stakePoolAddress: PublicKey,\n  seed: BN,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [EPHEMERAL_STAKE_SEED_PREFIX, stakePoolAddress.toBuffer(), seed.toArrayLike(Buffer, 'le', 8)],\n    programId,\n  );\n  return publicKey;\n}\n\n/**\n * Generates the metadata program address for the stake pool\n */\nexport function findMetadataAddress(stakePoolMintAddress: PublicKey) {\n  const [publicKey] = PublicKey.findProgramAddressSync(\n    [Buffer.from('metadata'), METADATA_PROGRAM_ID.toBuffer(), stakePoolMintAddress.toBuffer()],\n    METADATA_PROGRAM_ID,\n  );\n  return publicKey;\n}\n","import { publicKey, struct, u32, u64, u8, option, vec } from '@coral-xyz/borsh';\nimport { Lockup, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport {\n  Infer,\n  number,\n  nullable,\n  enums,\n  type,\n  coerce,\n  instance,\n  string,\n  optional,\n} from 'superstruct';\n\nexport interface Fee {\n  denominator: BN;\n  numerator: BN;\n}\n\nconst feeFields = [u64('denominator'), u64('numerator')];\n\nexport enum AccountType {\n  Uninitialized,\n  StakePool,\n  ValidatorList,\n}\n\nexport const BigNumFromString = coerce(instance(BN), string(), (value) => {\n  if (typeof value === 'string') return new BN(value, 10);\n  throw new Error('invalid big num');\n});\n\nexport const PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  (value) => new PublicKey(value),\n);\n\nexport type StakeAccountType = Infer<typeof StakeAccountType>;\nexport const StakeAccountType = enums(['uninitialized', 'initialized', 'delegated', 'rewardsPool']);\n\nexport type StakeMeta = Infer<typeof StakeMeta>;\nexport const StakeMeta = type({\n  rentExemptReserve: BigNumFromString,\n  authorized: type({\n    staker: PublicKeyFromString,\n    withdrawer: PublicKeyFromString,\n  }),\n  lockup: type({\n    unixTimestamp: number(),\n    epoch: number(),\n    custodian: PublicKeyFromString,\n  }),\n});\n\nexport type StakeAccountInfo = Infer<typeof StakeAccountInfo>;\nexport const StakeAccountInfo = type({\n  meta: StakeMeta,\n  stake: nullable(\n    type({\n      delegation: type({\n        voter: PublicKeyFromString,\n        stake: BigNumFromString,\n        activationEpoch: BigNumFromString,\n        deactivationEpoch: BigNumFromString,\n        warmupCooldownRate: number(),\n      }),\n      creditsObserved: number(),\n    }),\n  ),\n});\n\nexport type StakeAccount = Infer<typeof StakeAccount>;\nexport const StakeAccount = type({\n  type: StakeAccountType,\n  info: optional(StakeAccountInfo),\n});\n\nexport interface StakePool {\n  accountType: AccountType;\n  manager: PublicKey;\n  staker: PublicKey;\n  stakeDepositAuthority: PublicKey;\n  stakeWithdrawBumpSeed: number;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  poolMint: PublicKey;\n  managerFeeAccount: PublicKey;\n  tokenProgramId: PublicKey;\n  totalLamports: BN;\n  poolTokenSupply: BN;\n  lastUpdateEpoch: BN;\n  lockup: Lockup;\n  epochFee: Fee;\n  nextEpochFee?: Fee | undefined;\n  preferredDepositValidatorVoteAddress?: PublicKey | undefined;\n  preferredWithdrawValidatorVoteAddress?: PublicKey | undefined;\n  stakeDepositFee: Fee;\n  stakeWithdrawalFee: Fee;\n  nextStakeWithdrawalFee?: Fee | undefined;\n  stakeReferralFee: number;\n  solDepositAuthority?: PublicKey | undefined;\n  solDepositFee: Fee;\n  solReferralFee: number;\n  solWithdrawAuthority?: PublicKey | undefined;\n  solWithdrawalFee: Fee;\n  nextSolWithdrawalFee?: Fee | undefined;\n  lastEpochPoolTokenSupply: BN;\n  lastEpochTotalLamports: BN;\n}\n\nexport const StakePoolLayout = struct<StakePool>([\n  u8('accountType'),\n  publicKey('manager'),\n  publicKey('staker'),\n  publicKey('stakeDepositAuthority'),\n  u8('stakeWithdrawBumpSeed'),\n  publicKey('validatorList'),\n  publicKey('reserveStake'),\n  publicKey('poolMint'),\n  publicKey('managerFeeAccount'),\n  publicKey('tokenProgramId'),\n  u64('totalLamports'),\n  u64('poolTokenSupply'),\n  u64('lastUpdateEpoch'),\n  struct([u64('unixTimestamp'), u64('epoch'), publicKey('custodian')], 'lockup'),\n  struct(feeFields, 'epochFee'),\n  option(struct(feeFields), 'nextEpochFee'),\n  option(publicKey(), 'preferredDepositValidatorVoteAddress'),\n  option(publicKey(), 'preferredWithdrawValidatorVoteAddress'),\n  struct(feeFields, 'stakeDepositFee'),\n  struct(feeFields, 'stakeWithdrawalFee'),\n  option(struct(feeFields), 'nextStakeWithdrawalFee'),\n  u8('stakeReferralFee'),\n  option(publicKey(), 'solDepositAuthority'),\n  struct(feeFields, 'solDepositFee'),\n  u8('solReferralFee'),\n  option(publicKey(), 'solWithdrawAuthority'),\n  struct(feeFields, 'solWithdrawalFee'),\n  option(struct(feeFields), 'nextSolWithdrawalFee'),\n  u64('lastEpochPoolTokenSupply'),\n  u64('lastEpochTotalLamports'),\n]);\n\nexport enum ValidatorStakeInfoStatus {\n  Active,\n  DeactivatingTransient,\n  ReadyForRemoval,\n}\n\nexport interface ValidatorStakeInfo {\n  status: ValidatorStakeInfoStatus;\n  voteAccountAddress: PublicKey;\n  activeStakeLamports: BN;\n  transientStakeLamports: BN;\n  transientSeedSuffixStart: BN;\n  transientSeedSuffixEnd: BN;\n  lastUpdateEpoch: BN;\n}\n\nexport const ValidatorStakeInfoLayout = struct<ValidatorStakeInfo>([\n  /// Amount of active stake delegated to this validator\n  /// Note that if `last_update_epoch` does not match the current epoch then\n  /// this field may not be accurate\n  u64('activeStakeLamports'),\n  /// Amount of transient stake delegated to this validator\n  /// Note that if `last_update_epoch` does not match the current epoch then\n  /// this field may not be accurate\n  u64('transientStakeLamports'),\n  /// Last epoch the active and transient stake lamports fields were updated\n  u64('lastUpdateEpoch'),\n  /// Start of the validator transient account seed suffixes\n  u64('transientSeedSuffixStart'),\n  /// End of the validator transient account seed suffixes\n  u64('transientSeedSuffixEnd'),\n  /// Status of the validator stake account\n  u8('status'),\n  /// Validator vote account address\n  publicKey('voteAccountAddress'),\n]);\n\nexport interface ValidatorList {\n  /// Account type, must be ValidatorList currently\n  accountType: number;\n  /// Maximum allowable number of validators\n  maxValidators: number;\n  /// List of stake info for each validator in the pool\n  validators: ValidatorStakeInfo[];\n}\n\nexport const ValidatorListLayout = struct<ValidatorList>([\n  u8('accountType'),\n  u32('maxValidators'),\n  vec(ValidatorStakeInfoLayout, 'validators'),\n]);\n","import {\n  Connection,\n  Keypair,\n  PublicKey,\n  StakeProgram,\n  SystemProgram,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { findStakeProgramAddress, findTransientStakeProgramAddress } from './program-address';\nimport BN from 'bn.js';\n\nimport { lamportsToSol } from './math';\nimport { WithdrawAccount } from '../index';\nimport {\n  Fee,\n  StakePool,\n  ValidatorList,\n  ValidatorListLayout,\n  ValidatorStakeInfoStatus,\n} from '../layouts';\nimport { MINIMUM_ACTIVE_STAKE, STAKE_POOL_PROGRAM_ID } from '../constants';\n\nexport async function getValidatorListAccount(connection: Connection, pubkey: PublicKey) {\n  const account = await connection.getAccountInfo(pubkey);\n  if (!account) {\n    throw new Error('Invalid validator list account');\n  }\n\n  return {\n    pubkey,\n    account: {\n      data: ValidatorListLayout.decode(account?.data) as ValidatorList,\n      executable: account.executable,\n      lamports: account.lamports,\n      owner: account.owner,\n    },\n  };\n}\n\nexport interface ValidatorAccount {\n  type: 'preferred' | 'active' | 'transient' | 'reserve';\n  voteAddress?: PublicKey | undefined;\n  stakeAddress: PublicKey;\n  lamports: number;\n}\n\nexport async function prepareWithdrawAccounts(\n  connection: Connection,\n  stakePool: StakePool,\n  stakePoolAddress: PublicKey,\n  amount: number,\n  compareFn?: (a: ValidatorAccount, b: ValidatorAccount) => number,\n  skipFee?: boolean,\n): Promise<WithdrawAccount[]> {\n  const validatorListAcc = await connection.getAccountInfo(stakePool.validatorList);\n  const validatorList = ValidatorListLayout.decode(validatorListAcc?.data) as ValidatorList;\n\n  if (!validatorList?.validators || validatorList?.validators.length == 0) {\n    throw new Error('No accounts found');\n  }\n\n  const minBalanceForRentExemption = await connection.getMinimumBalanceForRentExemption(\n    StakeProgram.space,\n  );\n  const minBalance = minBalanceForRentExemption + MINIMUM_ACTIVE_STAKE;\n\n  let accounts = [] as Array<{\n    type: 'preferred' | 'active' | 'transient' | 'reserve';\n    voteAddress?: PublicKey | undefined;\n    stakeAddress: PublicKey;\n    lamports: number;\n  }>;\n\n  // Prepare accounts\n  for (const validator of validatorList.validators) {\n    if (validator.status !== ValidatorStakeInfoStatus.Active) {\n      continue;\n    }\n\n    const stakeAccountAddress = await findStakeProgramAddress(\n      STAKE_POOL_PROGRAM_ID,\n      validator.voteAccountAddress,\n      stakePoolAddress,\n    );\n\n    if (!validator.activeStakeLamports.isZero()) {\n      const isPreferred = stakePool?.preferredWithdrawValidatorVoteAddress?.equals(\n        validator.voteAccountAddress,\n      );\n      accounts.push({\n        type: isPreferred ? 'preferred' : 'active',\n        voteAddress: validator.voteAccountAddress,\n        stakeAddress: stakeAccountAddress,\n        lamports: validator.activeStakeLamports.toNumber(),\n      });\n    }\n\n    const transientStakeLamports = validator.transientStakeLamports.toNumber() - minBalance;\n    if (transientStakeLamports > 0) {\n      const transientStakeAccountAddress = await findTransientStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n        validator.transientSeedSuffixStart,\n      );\n      accounts.push({\n        type: 'transient',\n        voteAddress: validator.voteAccountAddress,\n        stakeAddress: transientStakeAccountAddress,\n        lamports: transientStakeLamports,\n      });\n    }\n  }\n\n  // Sort from highest to lowest balance\n  accounts = accounts.sort(compareFn ? compareFn : (a, b) => b.lamports - a.lamports);\n\n  const reserveStake = await connection.getAccountInfo(stakePool.reserveStake);\n  const reserveStakeBalance = (reserveStake?.lamports ?? 0) - minBalanceForRentExemption;\n  if (reserveStakeBalance > 0) {\n    accounts.push({\n      type: 'reserve',\n      stakeAddress: stakePool.reserveStake,\n      lamports: reserveStakeBalance,\n    });\n  }\n\n  // Prepare the list of accounts to withdraw from\n  const withdrawFrom: WithdrawAccount[] = [];\n  let remainingAmount = amount;\n\n  const fee = stakePool.stakeWithdrawalFee;\n  const inverseFee: Fee = {\n    numerator: fee.denominator.sub(fee.numerator),\n    denominator: fee.denominator,\n  };\n\n  for (const type of ['preferred', 'active', 'transient', 'reserve']) {\n    const filteredAccounts = accounts.filter((a) => a.type == type);\n\n    for (const { stakeAddress, voteAddress, lamports } of filteredAccounts) {\n      if (lamports <= minBalance && type == 'transient') {\n        continue;\n      }\n\n      let availableForWithdrawal = calcPoolTokensForDeposit(stakePool, lamports);\n\n      if (!skipFee && !inverseFee.numerator.isZero()) {\n        availableForWithdrawal = divideBnToNumber(\n          new BN(availableForWithdrawal).mul(inverseFee.denominator),\n          inverseFee.numerator,\n        );\n      }\n\n      const poolAmount = Math.min(availableForWithdrawal, remainingAmount);\n      if (poolAmount <= 0) {\n        continue;\n      }\n\n      // Those accounts will be withdrawn completely with `claim` instruction\n      withdrawFrom.push({ stakeAddress, voteAddress, poolAmount });\n      remainingAmount -= poolAmount;\n\n      if (remainingAmount == 0) {\n        break;\n      }\n    }\n\n    if (remainingAmount == 0) {\n      break;\n    }\n  }\n\n  // Not enough stake to withdraw the specified amount\n  if (remainingAmount > 0) {\n    throw new Error(\n      `No stake accounts found in this pool with enough balance to withdraw ${lamportsToSol(\n        amount,\n      )} pool tokens.`,\n    );\n  }\n\n  return withdrawFrom;\n}\n\n/**\n * Calculate the pool tokens that should be minted for a deposit of `stakeLamports`\n */\nexport function calcPoolTokensForDeposit(stakePool: StakePool, stakeLamports: number): number {\n  if (stakePool.poolTokenSupply.isZero() || stakePool.totalLamports.isZero()) {\n    return stakeLamports;\n  }\n  return Math.floor(\n    divideBnToNumber(new BN(stakeLamports).mul(stakePool.poolTokenSupply), stakePool.totalLamports),\n  );\n}\n\n/**\n * Calculate lamports amount on withdrawal\n */\nexport function calcLamportsWithdrawAmount(stakePool: StakePool, poolTokens: number): number {\n  const numerator = new BN(poolTokens).mul(stakePool.totalLamports);\n  const denominator = stakePool.poolTokenSupply;\n  if (numerator.lt(denominator)) {\n    return 0;\n  }\n  return divideBnToNumber(numerator, denominator);\n}\n\nexport function divideBnToNumber(numerator: BN, denominator: BN): number {\n  if (denominator.isZero()) {\n    return 0;\n  }\n  const quotient = numerator.div(denominator).toNumber();\n  const rem = numerator.umod(denominator);\n  const gcd = rem.gcd(denominator);\n  return quotient + rem.div(gcd).toNumber() / denominator.div(gcd).toNumber();\n}\n\nexport function newStakeAccount(\n  feePayer: PublicKey,\n  instructions: TransactionInstruction[],\n  lamports: number,\n): Keypair {\n  // Account for tokens not specified, creating one\n  const stakeReceiverKeypair = Keypair.generate();\n  console.log(`Creating account to receive stake ${stakeReceiverKeypair.publicKey}`);\n\n  instructions.push(\n    // Creating new account\n    SystemProgram.createAccount({\n      fromPubkey: feePayer,\n      newAccountPubkey: stakeReceiverKeypair.publicKey,\n      lamports,\n      space: StakeProgram.space,\n      programId: StakeProgram.programId,\n    }),\n  );\n\n  return stakeReceiverKeypair;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport { Buffer } from 'buffer';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<any>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength = type.layout.span;\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({ instruction: type.index }, fields);\n  type.layout.encode(layoutFields, data);\n\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","export * from './math';\nexport * from './program-address';\nexport * from './stake';\nexport * from './instruction';\n\nexport function arrayChunk(array: any[], size: number): any[] {\n  const result = [];\n  for (let i = 0; i < array.length; i += size) {\n    result.push(array.slice(i, i + size));\n  }\n  return result;\n}\n","import {\n  PublicKey,\n  STAKE_CONFIG_ID,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n  StakeProgram,\n  SystemProgram,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { InstructionType, encodeData, decodeData } from './utils';\nimport BN from 'bn.js';\nimport {\n  METADATA_MAX_NAME_LENGTH,\n  METADATA_MAX_SYMBOL_LENGTH,\n  METADATA_MAX_URI_LENGTH,\n  METADATA_PROGRAM_ID,\n  STAKE_POOL_PROGRAM_ID,\n} from './constants';\n\n/**\n * An enumeration of valid StakePoolInstructionType's\n */\nexport type StakePoolInstructionType =\n  | 'IncreaseValidatorStake'\n  | 'DecreaseValidatorStake'\n  | 'UpdateValidatorListBalance'\n  | 'UpdateStakePoolBalance'\n  | 'CleanupRemovedValidatorEntries'\n  | 'DepositStake'\n  | 'DepositSol'\n  | 'WithdrawStake'\n  | 'WithdrawSol'\n  | 'IncreaseAdditionalValidatorStake'\n  | 'DecreaseAdditionalValidatorStake'\n  | 'DecreaseValidatorStakeWithReserve'\n  | 'Redelegate'\n  | 'AddValidatorToPool';\n\n// 'UpdateTokenMetadata' and 'CreateTokenMetadata' have dynamic layouts\n\nconst MOVE_STAKE_LAYOUT = BufferLayout.struct<any>([\n  BufferLayout.u8('instruction'),\n  BufferLayout.ns64('lamports'),\n  BufferLayout.ns64('transientStakeSeed'),\n]);\n\nconst UPDATE_VALIDATOR_LIST_BALANCE_LAYOUT = BufferLayout.struct<any>([\n  BufferLayout.u8('instruction'),\n  BufferLayout.u32('startIndex'),\n  BufferLayout.u8('noMerge'),\n]);\n\nexport function tokenMetadataLayout(\n  instruction: number,\n  nameLength: number,\n  symbolLength: number,\n  uriLength: number,\n) {\n  if (nameLength > METADATA_MAX_NAME_LENGTH) {\n    throw 'maximum token name length is 32 characters';\n  }\n\n  if (symbolLength > METADATA_MAX_SYMBOL_LENGTH) {\n    throw 'maximum token symbol length is 10 characters';\n  }\n\n  if (uriLength > METADATA_MAX_URI_LENGTH) {\n    throw 'maximum token uri length is 200 characters';\n  }\n\n  return {\n    index: instruction,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('nameLen'),\n      BufferLayout.blob(nameLength, 'name'),\n      BufferLayout.u32('symbolLen'),\n      BufferLayout.blob(symbolLength, 'symbol'),\n      BufferLayout.u32('uriLen'),\n      BufferLayout.blob(uriLength, 'uri'),\n    ]),\n  };\n}\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_POOL_INSTRUCTION_LAYOUTS: {\n  [type in StakePoolInstructionType]: InstructionType;\n} = Object.freeze({\n  AddValidatorToPool: {\n    index: 1,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction'), BufferLayout.u32('seed')]),\n  },\n  DecreaseValidatorStake: {\n    index: 3,\n    layout: MOVE_STAKE_LAYOUT,\n  },\n  IncreaseValidatorStake: {\n    index: 4,\n    layout: MOVE_STAKE_LAYOUT,\n  },\n  UpdateValidatorListBalance: {\n    index: 6,\n    layout: UPDATE_VALIDATOR_LIST_BALANCE_LAYOUT,\n  },\n  UpdateStakePoolBalance: {\n    index: 7,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n  CleanupRemovedValidatorEntries: {\n    index: 8,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n  DepositStake: {\n    index: 9,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n  /// Withdraw the token from the pool at the current ratio.\n  WithdrawStake: {\n    index: 10,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('poolTokens'),\n    ]),\n  },\n  /// Deposit SOL directly into the pool's reserve account. The output is a \"pool\" token\n  /// representing ownership into the pool. Inputs are converted to the current ratio.\n  DepositSol: {\n    index: 14,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  /// Withdraw SOL directly from the pool's reserve account. Fails if the\n  /// reserve does not have enough SOL.\n  WithdrawSol: {\n    index: 16,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('poolTokens'),\n    ]),\n  },\n  IncreaseAdditionalValidatorStake: {\n    index: 19,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('transientStakeSeed'),\n      BufferLayout.ns64('ephemeralStakeSeed'),\n    ]),\n  },\n  DecreaseAdditionalValidatorStake: {\n    index: 20,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('transientStakeSeed'),\n      BufferLayout.ns64('ephemeralStakeSeed'),\n    ]),\n  },\n  DecreaseValidatorStakeWithReserve: {\n    index: 21,\n    layout: MOVE_STAKE_LAYOUT,\n  },\n  Redelegate: {\n    index: 22,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      /// Amount of lamports to redelegate\n      BufferLayout.ns64('lamports'),\n      /// Seed used to create source transient stake account\n      BufferLayout.ns64('sourceTransientStakeSeed'),\n      /// Seed used to create destination ephemeral account.\n      BufferLayout.ns64('ephemeralStakeSeed'),\n      /// Seed used to create destination transient stake account. If there is\n      /// already transient stake, this must match the current seed, otherwise\n      /// it can be anything\n      BufferLayout.ns64('destinationTransientStakeSeed'),\n    ]),\n  },\n});\n\n/**\n * Cleans up validator stake account entries marked as `ReadyForRemoval`\n */\nexport type CleanupRemovedValidatorEntriesParams = {\n  stakePool: PublicKey;\n  validatorList: PublicKey;\n};\n\n/**\n * Updates balances of validator and transient stake accounts in the pool.\n */\nexport type UpdateValidatorListBalanceParams = {\n  stakePool: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  validatorAndTransientStakePairs: PublicKey[];\n  startIndex: number;\n  noMerge: boolean;\n};\n\n/**\n * Updates total pool balance based on balances in the reserve and validator list.\n */\nexport type UpdateStakePoolBalanceParams = {\n  stakePool: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  managerFeeAccount: PublicKey;\n  poolMint: PublicKey;\n};\n\n/**\n * (Staker only) Decrease active stake on a validator, eventually moving it to the reserve\n */\nexport type DecreaseValidatorStakeParams = {\n  stakePool: PublicKey;\n  staker: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  validatorStake: PublicKey;\n  transientStake: PublicKey;\n  // Amount of lamports to split into the transient stake account\n  lamports: number;\n  // Seed to used to create the transient stake account\n  transientStakeSeed: number;\n};\n\nexport interface DecreaseValidatorStakeWithReserveParams extends DecreaseValidatorStakeParams {\n  reserveStake: PublicKey;\n}\n\nexport interface DecreaseAdditionalValidatorStakeParams extends DecreaseValidatorStakeParams {\n  reserveStake: PublicKey;\n  ephemeralStake: PublicKey;\n  ephemeralStakeSeed: number;\n}\n\n/**\n * (Staker only) Increase stake on a validator from the reserve account.\n */\nexport type IncreaseValidatorStakeParams = {\n  stakePool: PublicKey;\n  staker: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  transientStake: PublicKey;\n  validatorStake: PublicKey;\n  validatorVote: PublicKey;\n  // Amount of lamports to split into the transient stake account\n  lamports: number;\n  // Seed to used to create the transient stake account\n  transientStakeSeed: number;\n};\n\nexport interface IncreaseAdditionalValidatorStakeParams extends IncreaseValidatorStakeParams {\n  ephemeralStake: PublicKey;\n  ephemeralStakeSeed: number;\n}\n\n/**\n * Deposits a stake account into the pool in exchange for pool tokens\n */\nexport type DepositStakeParams = {\n  stakePool: PublicKey;\n  validatorList: PublicKey;\n  depositAuthority: PublicKey;\n  withdrawAuthority: PublicKey;\n  depositStake: PublicKey;\n  validatorStake: PublicKey;\n  reserveStake: PublicKey;\n  destinationPoolAccount: PublicKey;\n  managerFeeAccount: PublicKey;\n  referralPoolAccount: PublicKey;\n  poolMint: PublicKey;\n};\n\n/**\n * Withdraws a stake account from the pool in exchange for pool tokens\n */\nexport type WithdrawStakeParams = {\n  stakePool: PublicKey;\n  validatorList: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorStake: PublicKey;\n  destinationStake: PublicKey;\n  destinationStakeAuthority: PublicKey;\n  sourceTransferAuthority: PublicKey;\n  sourcePoolAccount: PublicKey;\n  managerFeeAccount: PublicKey;\n  poolMint: PublicKey;\n  poolTokens: number;\n};\n\n/**\n * Withdraw sol instruction params\n */\nexport type WithdrawSolParams = {\n  stakePool: PublicKey;\n  sourcePoolAccount: PublicKey;\n  withdrawAuthority: PublicKey;\n  reserveStake: PublicKey;\n  destinationSystemAccount: PublicKey;\n  sourceTransferAuthority: PublicKey;\n  solWithdrawAuthority?: PublicKey | undefined;\n  managerFeeAccount: PublicKey;\n  poolMint: PublicKey;\n  poolTokens: number;\n};\n\n/**\n * Deposit SOL directly into the pool's reserve account. The output is a \"pool\" token\n * representing ownership into the pool. Inputs are converted to the current ratio.\n */\nexport type DepositSolParams = {\n  stakePool: PublicKey;\n  depositAuthority?: PublicKey | undefined;\n  withdrawAuthority: PublicKey;\n  reserveStake: PublicKey;\n  fundingAccount: PublicKey;\n  destinationPoolAccount: PublicKey;\n  managerFeeAccount: PublicKey;\n  referralPoolAccount: PublicKey;\n  poolMint: PublicKey;\n  lamports: number;\n};\n\nexport type RedelegateParams = {\n  stakePool: PublicKey;\n  staker: PublicKey;\n  stakePoolWithdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  sourceValidatorStake: PublicKey;\n  sourceTransientStake: PublicKey;\n  ephemeralStake: PublicKey;\n  destinationTransientStake: PublicKey;\n  destinationValidatorStake: PublicKey;\n  validator: PublicKey;\n  // Amount of lamports to redelegate\n  lamports: number | BN;\n  // Seed used to create source transient stake account\n  sourceTransientStakeSeed: number | BN;\n  // Seed used to create destination ephemeral account\n  ephemeralStakeSeed: number | BN;\n  // Seed used to create destination transient stake account. If there is\n  // already transient stake, this must match the current seed, otherwise\n  // it can be anything\n  destinationTransientStakeSeed: number | BN;\n};\n\nexport type CreateTokenMetadataParams = {\n  stakePool: PublicKey;\n  manager: PublicKey;\n  tokenMetadata: PublicKey;\n  withdrawAuthority: PublicKey;\n  poolMint: PublicKey;\n  payer: PublicKey;\n  name: string;\n  symbol: string;\n  uri: string;\n};\n\nexport type UpdateTokenMetadataParams = {\n  stakePool: PublicKey;\n  manager: PublicKey;\n  tokenMetadata: PublicKey;\n  withdrawAuthority: PublicKey;\n  name: string;\n  symbol: string;\n  uri: string;\n};\n\nexport type AddValidatorToPoolParams = {\n  stakePool: PublicKey;\n  staker: PublicKey;\n  reserveStake: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  validatorStake: PublicKey;\n  validatorVote: PublicKey;\n  seed?: number;\n};\n\n/**\n * Stake Pool Instruction class\n */\nexport class StakePoolInstruction {\n  /**\n   * Creates instruction to add a validator into the stake pool.\n   */\n  static addValidatorToPool(params: AddValidatorToPoolParams): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      reserveStake,\n      withdrawAuthority,\n      validatorList,\n      validatorStake,\n      validatorVote,\n      seed,\n    } = params;\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.AddValidatorToPool;\n    const data = encodeData(type, { seed: seed == undefined ? 0 : seed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: validatorVote, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to update a set of validators in the stake pool.\n   */\n  static updateValidatorListBalance(\n    params: UpdateValidatorListBalanceParams,\n  ): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      startIndex,\n      noMerge,\n      validatorAndTransientStakePairs,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.UpdateValidatorListBalance;\n    const data = encodeData(type, { startIndex, noMerge: noMerge ? 1 : 0 });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n      ...validatorAndTransientStakePairs.map((pubkey) => ({\n        pubkey,\n        isSigner: false,\n        isWritable: true,\n      })),\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to update the overall stake pool balance.\n   */\n  static updateStakePoolBalance(params: UpdateStakePoolBalanceParams): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      managerFeeAccount,\n      poolMint,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.UpdateStakePoolBalance;\n    const data = encodeData(type);\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: false },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to cleanup removed validator entries.\n   */\n  static cleanupRemovedValidatorEntries(\n    params: CleanupRemovedValidatorEntriesParams,\n  ): TransactionInstruction {\n    const { stakePool, validatorList } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.CleanupRemovedValidatorEntries;\n    const data = encodeData(type);\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `IncreaseValidatorStake` instruction (rebalance from reserve account to\n   * transient account)\n   */\n  static increaseValidatorStake(params: IncreaseValidatorStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      transientStake,\n      validatorStake,\n      validatorVote,\n      lamports,\n      transientStakeSeed,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.IncreaseValidatorStake;\n    const data = encodeData(type, { lamports, transientStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: false },\n      { pubkey: validatorVote, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `IncreaseAdditionalValidatorStake` instruction (rebalance from reserve account to\n   * transient account)\n   */\n  static increaseAdditionalValidatorStake(\n    params: IncreaseAdditionalValidatorStakeParams,\n  ): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      transientStake,\n      validatorStake,\n      validatorVote,\n      lamports,\n      transientStakeSeed,\n      ephemeralStake,\n      ephemeralStakeSeed,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.IncreaseAdditionalValidatorStake;\n    const data = encodeData(type, { lamports, transientStakeSeed, ephemeralStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: ephemeralStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: false },\n      { pubkey: validatorVote, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `DecreaseValidatorStake` instruction (rebalance from validator account to\n   * transient account)\n   */\n  static decreaseValidatorStake(params: DecreaseValidatorStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      validatorStake,\n      transientStake,\n      lamports,\n      transientStakeSeed,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DecreaseValidatorStake;\n    const data = encodeData(type, { lamports, transientStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `DecreaseValidatorStakeWithReserve` instruction (rebalance from\n   * validator account to transient account)\n   */\n  static decreaseValidatorStakeWithReserve(\n    params: DecreaseValidatorStakeWithReserveParams,\n  ): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      validatorStake,\n      transientStake,\n      lamports,\n      transientStakeSeed,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DecreaseValidatorStakeWithReserve;\n    const data = encodeData(type, { lamports, transientStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `DecreaseAdditionalValidatorStake` instruction (rebalance from\n   * validator account to transient account)\n   */\n  static decreaseAdditionalValidatorStake(\n    params: DecreaseAdditionalValidatorStakeParams,\n  ): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      validatorStake,\n      transientStake,\n      lamports,\n      transientStakeSeed,\n      ephemeralStakeSeed,\n      ephemeralStake,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DecreaseAdditionalValidatorStake;\n    const data = encodeData(type, { lamports, transientStakeSeed, ephemeralStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: ephemeralStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to deposit a stake account into a stake pool.\n   */\n  static depositStake(params: DepositStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      validatorList,\n      depositAuthority,\n      withdrawAuthority,\n      depositStake,\n      validatorStake,\n      reserveStake,\n      destinationPoolAccount,\n      managerFeeAccount,\n      referralPoolAccount,\n      poolMint,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DepositStake;\n    const data = encodeData(type);\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: depositAuthority, isSigner: false, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: depositStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: destinationPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: referralPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to deposit SOL into a stake pool.\n   */\n  static depositSol(params: DepositSolParams): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      depositAuthority,\n      reserveStake,\n      fundingAccount,\n      destinationPoolAccount,\n      managerFeeAccount,\n      referralPoolAccount,\n      poolMint,\n      lamports,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DepositSol;\n    const data = encodeData(type, { lamports });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: fundingAccount, isSigner: true, isWritable: true },\n      { pubkey: destinationPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: referralPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    if (depositAuthority) {\n      keys.push({\n        pubkey: depositAuthority,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to withdraw active stake from a stake pool.\n   */\n  static withdrawStake(params: WithdrawStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      validatorList,\n      withdrawAuthority,\n      validatorStake,\n      destinationStake,\n      destinationStakeAuthority,\n      sourceTransferAuthority,\n      sourcePoolAccount,\n      managerFeeAccount,\n      poolMint,\n      poolTokens,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.WithdrawStake;\n    const data = encodeData(type, { poolTokens });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: destinationStake, isSigner: false, isWritable: true },\n      { pubkey: destinationStakeAuthority, isSigner: false, isWritable: false },\n      { pubkey: sourceTransferAuthority, isSigner: true, isWritable: false },\n      { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to withdraw SOL from a stake pool.\n   */\n  static withdrawSol(params: WithdrawSolParams): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      sourceTransferAuthority,\n      sourcePoolAccount,\n      reserveStake,\n      destinationSystemAccount,\n      managerFeeAccount,\n      solWithdrawAuthority,\n      poolMint,\n      poolTokens,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.WithdrawSol;\n    const data = encodeData(type, { poolTokens });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: sourceTransferAuthority, isSigner: true, isWritable: false },\n      { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: destinationSystemAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    if (solWithdrawAuthority) {\n      keys.push({\n        pubkey: solWithdrawAuthority,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `Redelegate` instruction (rebalance from one validator account to another)\n   * @param params\n   */\n  static redelegate(params: RedelegateParams): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      stakePoolWithdrawAuthority,\n      validatorList,\n      reserveStake,\n      sourceValidatorStake,\n      sourceTransientStake,\n      ephemeralStake,\n      destinationTransientStake,\n      destinationValidatorStake,\n      validator,\n      lamports,\n      sourceTransientStakeSeed,\n      ephemeralStakeSeed,\n      destinationTransientStakeSeed,\n    } = params;\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: stakePoolWithdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: sourceValidatorStake, isSigner: false, isWritable: true },\n      { pubkey: sourceTransientStake, isSigner: false, isWritable: true },\n      { pubkey: ephemeralStake, isSigner: false, isWritable: true },\n      { pubkey: destinationTransientStake, isSigner: false, isWritable: true },\n      { pubkey: destinationValidatorStake, isSigner: false, isWritable: false },\n      { pubkey: validator, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    const data = encodeData(STAKE_POOL_INSTRUCTION_LAYOUTS.Redelegate, {\n      lamports,\n      sourceTransientStakeSeed,\n      ephemeralStakeSeed,\n      destinationTransientStakeSeed,\n    });\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates an instruction to create metadata\n   * using the mpl token metadata program for the pool token\n   */\n  static createTokenMetadata(params: CreateTokenMetadataParams): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      tokenMetadata,\n      manager,\n      payer,\n      poolMint,\n      name,\n      symbol,\n      uri,\n    } = params;\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: manager, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: poolMint, isSigner: false, isWritable: false },\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: tokenMetadata, isSigner: false, isWritable: true },\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    const type = tokenMetadataLayout(17, name.length, symbol.length, uri.length);\n    const data = encodeData(type, {\n      nameLen: name.length,\n      name: Buffer.from(name),\n      symbolLen: symbol.length,\n      symbol: Buffer.from(symbol),\n      uriLen: uri.length,\n      uri: Buffer.from(uri),\n    });\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates an instruction to update metadata\n   * in the mpl token metadata program account for the pool token\n   */\n  static updateTokenMetadata(params: UpdateTokenMetadataParams): TransactionInstruction {\n    const { stakePool, withdrawAuthority, tokenMetadata, manager, name, symbol, uri } = params;\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: manager, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: tokenMetadata, isSigner: false, isWritable: true },\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const type = tokenMetadataLayout(18, name.length, symbol.length, uri.length);\n    const data = encodeData(type, {\n      nameLen: name.length,\n      name: Buffer.from(name),\n      symbolLen: symbol.length,\n      symbol: Buffer.from(symbol),\n      uriLen: uri.length,\n      uri: Buffer.from(uri),\n    });\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Decode a deposit stake pool instruction and retrieve the instruction params.\n   */\n  static decodeDepositStake(instruction: TransactionInstruction): DepositStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 11);\n\n    decodeData(STAKE_POOL_INSTRUCTION_LAYOUTS.DepositStake, instruction.data);\n\n    return {\n      stakePool: instruction.keys[0].pubkey,\n      validatorList: instruction.keys[1].pubkey,\n      depositAuthority: instruction.keys[2].pubkey,\n      withdrawAuthority: instruction.keys[3].pubkey,\n      depositStake: instruction.keys[4].pubkey,\n      validatorStake: instruction.keys[5].pubkey,\n      reserveStake: instruction.keys[6].pubkey,\n      destinationPoolAccount: instruction.keys[7].pubkey,\n      managerFeeAccount: instruction.keys[8].pubkey,\n      referralPoolAccount: instruction.keys[9].pubkey,\n      poolMint: instruction.keys[10].pubkey,\n    };\n  }\n\n  /**\n   * Decode a deposit sol instruction and retrieve the instruction params.\n   */\n  static decodeDepositSol(instruction: TransactionInstruction): DepositSolParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 9);\n\n    const { amount } = decodeData(STAKE_POOL_INSTRUCTION_LAYOUTS.DepositSol, instruction.data);\n\n    return {\n      stakePool: instruction.keys[0].pubkey,\n      depositAuthority: instruction.keys[1].pubkey,\n      withdrawAuthority: instruction.keys[2].pubkey,\n      reserveStake: instruction.keys[3].pubkey,\n      fundingAccount: instruction.keys[4].pubkey,\n      destinationPoolAccount: instruction.keys[5].pubkey,\n      managerFeeAccount: instruction.keys[6].pubkey,\n      referralPoolAccount: instruction.keys[7].pubkey,\n      poolMint: instruction.keys[8].pubkey,\n      lamports: amount,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  private static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('Invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `Invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n","import BN from 'bn.js';\nimport fs from 'fs';\nimport { create } from 'superstruct';\n\nimport {\n  createApproveInstruction,\n  createAssociatedTokenAccountIdempotentInstruction,\n  getAccount,\n  getAssociatedTokenAddressSync,\n} from '@solana/spl-token';\nimport {\n  AccountInfo,\n  ComputeBudgetProgram,\n  Connection,\n  Keypair,\n  PublicKey,\n  Signer,\n  StakeAuthorizationLayout,\n  StakeProgram,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nimport {\n  MAX_VALIDATORS_TO_UPDATE,\n  MINIMUM_ACTIVE_STAKE,\n  STAKE_POOL_PROGRAM_ID,\n} from './constants';\nimport { StakePoolInstruction } from './instructions';\nimport {\n  StakeAccount,\n  StakePool,\n  StakePoolLayout,\n  ValidatorList,\n  ValidatorListLayout,\n  ValidatorStakeInfo,\n} from './layouts';\nimport {\n  arrayChunk,\n  calcLamportsWithdrawAmount,\n  findEphemeralStakeProgramAddress,\n  findMetadataAddress,\n  findStakeProgramAddress,\n  findTransientStakeProgramAddress,\n  findWithdrawAuthorityProgramAddress,\n  getValidatorListAccount,\n  lamportsToSol,\n  newStakeAccount,\n  prepareWithdrawAccounts,\n  solToLamports,\n  ValidatorAccount,\n} from './utils';\n\nexport type {\n  AccountType,\n  StakePool,\n  ValidatorList,\n  ValidatorStakeInfo,\n} from './layouts';\nexport { STAKE_POOL_PROGRAM_ID } from './constants';\nexport * from './instructions';\n\nexport interface ValidatorListAccount {\n  pubkey: PublicKey;\n  account: AccountInfo<ValidatorList>;\n}\n\nexport interface StakePoolAccount {\n  pubkey: PublicKey;\n  account: AccountInfo<StakePool>;\n}\n\nexport interface WithdrawAccount {\n  stakeAddress: PublicKey;\n  voteAddress?: PublicKey;\n  poolAmount: number;\n}\n\n/**\n * Wrapper class for a stake pool.\n * Each stake pool has a stake pool account and a validator list account.\n */\nexport interface StakePoolAccounts {\n  stakePool: StakePoolAccount | undefined;\n  validatorList: ValidatorListAccount | undefined;\n}\n\ninterface RedelegateProps {\n  connection: Connection;\n  stakePoolAddress: PublicKey;\n  sourceVoteAccount: PublicKey;\n  destinationVoteAccount: PublicKey;\n  sourceTransientStakeSeed: number | BN;\n  destinationTransientStakeSeed: number | BN;\n  ephemeralStakeSeed: number | BN;\n  lamports: number | BN;\n}\n\n/**\n * Retrieves and deserializes a StakePool account using a web3js connection and the stake pool address.\n * @param connection: An active web3js connection.\n * @param stakePoolAddress: The public key (address) of the stake pool account.\n */\nexport async function getStakePoolAccount(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n): Promise<StakePoolAccount> {\n  // @ts-ignore\n  const account = await connection.getAccountInfo(new PublicKey('9jpeBtbarFDfihjb9Nu1cxzRTGcsTUE4P8kf8NFzgYbG'));\n\n  if (!account) {\n    throw new Error('Invalid stake pool account');\n  }\n\n  return {\n    pubkey: stakePoolAddress,\n    account: {\n      data: StakePoolLayout.decode(account.data),\n      executable: account.executable,\n      lamports: account.lamports,\n      owner: account.owner,\n    },\n  };\n}\n\n/**\n * Retrieves and deserializes a Stake account using a web3js connection and the stake address.\n * @param connection: An active web3js connection.\n * @param stakeAccount: The public key (address) of the stake account.\n */\nexport async function getStakeAccount(\n  connection: Connection,\n  stakeAccount: PublicKey,\n): Promise<StakeAccount> {\n  const result = (await connection.getParsedAccountInfo(stakeAccount)).value;\n  if (!result || !('parsed' in result.data)) {\n    throw new Error('Invalid stake account');\n  }\n  const program = result.data.program;\n  if (program != 'stake') {\n    throw new Error('Not a stake account');\n  }\n  const parsed = create(result.data.parsed, StakeAccount);\n\n  return parsed;\n}\n\n/**\n * Retrieves all StakePool and ValidatorList accounts that are running a particular StakePool program.\n * @param connection: An active web3js connection.\n * @param stakePoolProgramAddress: The public key (address) of the StakePool program.\n */\nexport async function getStakePoolAccounts(\n  connection: Connection,\n  stakePoolProgramAddress: PublicKey,\n): Promise<(StakePoolAccount | ValidatorListAccount)[] | undefined> {\n  const response = await connection.getProgramAccounts(stakePoolProgramAddress);\n\n  return response.map((a) => {\n    let decodedData;\n\n    if (a.account.data.readUInt8() === 1) {\n      try {\n        decodedData = StakePoolLayout.decode(a.account.data);\n      } catch (error) {\n        console.log('Could not decode StakeAccount. Error:', error);\n        decodedData = undefined;\n      }\n    } else if (a.account.data.readUInt8() === 2) {\n      try {\n        decodedData = ValidatorListLayout.decode(a.account.data);\n      } catch (error) {\n        console.log('Could not decode ValidatorList. Error:', error);\n        decodedData = undefined;\n      }\n    } else {\n      console.error(\n        `Could not decode. StakePoolAccount Enum is ${a.account.data.readUInt8()}, expected 1 or 2!`,\n      );\n      decodedData = undefined;\n    }\n\n    return {\n      pubkey: a.pubkey,\n      account: {\n        data: decodedData,\n        executable: a.account.executable,\n        lamports: a.account.lamports,\n        owner: a.account.owner,\n      },\n    };\n  });\n}\n\n/**\n * Creates instructions required to deposit stake to stake pool.\n */\nexport async function depositStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  authorizedPubkey: PublicKey,\n  validatorVote: PublicKey,\n  depositStake: PublicKey,\n  poolTokenReceiverAccount?: PublicKey,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorVote,\n    stakePoolAddress,\n  );\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Signer[] = [];\n\n  const poolMint = stakePool.account.data.poolMint;\n\n  // Create token account if not specified\n  if (!poolTokenReceiverAccount) {\n    const associatedAddress = getAssociatedTokenAddressSync(poolMint, authorizedPubkey);\n    instructions.push(\n      createAssociatedTokenAccountIdempotentInstruction(\n        authorizedPubkey,\n        associatedAddress,\n        authorizedPubkey,\n        poolMint,\n      ),\n    );\n    poolTokenReceiverAccount = associatedAddress;\n  }\n\n  instructions.push(\n    ...StakeProgram.authorize({\n      stakePubkey: depositStake,\n      authorizedPubkey,\n      newAuthorizedPubkey: stakePool.account.data.stakeDepositAuthority,\n      stakeAuthorizationType: StakeAuthorizationLayout.Staker,\n    }).instructions,\n  );\n\n  instructions.push(\n    ...StakeProgram.authorize({\n      stakePubkey: depositStake,\n      authorizedPubkey,\n      newAuthorizedPubkey: stakePool.account.data.stakeDepositAuthority,\n      stakeAuthorizationType: StakeAuthorizationLayout.Withdrawer,\n    }).instructions,\n  );\n\n  instructions.push(\n    StakePoolInstruction.depositStake({\n      stakePool: stakePoolAddress,\n      validatorList: stakePool.account.data.validatorList,\n      depositAuthority: stakePool.account.data.stakeDepositAuthority,\n      reserveStake: stakePool.account.data.reserveStake,\n      managerFeeAccount: stakePool.account.data.managerFeeAccount,\n      referralPoolAccount: poolTokenReceiverAccount,\n      destinationPoolAccount: poolTokenReceiverAccount,\n      withdrawAuthority,\n      depositStake,\n      validatorStake,\n      poolMint,\n    }),\n  );\n\n  return {\n    instructions,\n    signers,\n  };\n}\n\n/**\n * Creates instructions required to deposit sol to stake pool.\n */\nexport async function depositSol(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  from: PublicKey,\n  lamports: number,\n  destinationTokenAccount?: PublicKey,\n  referrerTokenAccount?: PublicKey,\n  depositAuthority?: PublicKey,\n) {\n  const fromBalance = await connection.getBalance(from, 'confirmed');\n  if (fromBalance < lamports) {\n    throw new Error(\n      `Not enough SOL to deposit into pool. Maximum deposit amount is ${lamportsToSol(\n        fromBalance,\n      )} SOL.`,\n    );\n  }\n\n  const stakePoolAccount = await getStakePoolAccount(connection, stakePoolAddress);\n  const stakePool = stakePoolAccount.account.data;\n\n  // Ephemeral SOL account just to do the transfer\n  const userSolTransfer = new Keypair();\n  const signers: Signer[] = [userSolTransfer];\n  const instructions: TransactionInstruction[] = [];\n\n  // Create the ephemeral SOL account\n  instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: from,\n      toPubkey: userSolTransfer.publicKey,\n      lamports,\n    }),\n  );\n\n  // Create token account if not specified\n  if (!destinationTokenAccount) {\n    const associatedAddress = getAssociatedTokenAddressSync(stakePool.poolMint, from);\n    instructions.push(\n      createAssociatedTokenAccountIdempotentInstruction(\n        from,\n        associatedAddress,\n        from,\n        stakePool.poolMint,\n      ),\n    );\n    destinationTokenAccount = associatedAddress;\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  instructions.push(\n    StakePoolInstruction.depositSol({\n      stakePool: stakePoolAddress,\n      reserveStake: stakePool.reserveStake,\n      fundingAccount: userSolTransfer.publicKey,\n      destinationPoolAccount: destinationTokenAccount,\n      managerFeeAccount: stakePool.managerFeeAccount,\n      referralPoolAccount: referrerTokenAccount ?? destinationTokenAccount,\n      poolMint: stakePool.poolMint,\n      lamports,\n      withdrawAuthority,\n      depositAuthority,\n    }),\n  );\n\n  return {\n    instructions,\n    signers,\n  };\n}\n\n/**\n * Creates instructions required to withdraw stake from a stake pool.\n */\nexport async function withdrawStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  tokenOwner: PublicKey,\n  amount: number,\n  useReserve = false,\n  voteAccountAddress?: PublicKey,\n  stakeReceiver?: PublicKey,\n  poolTokenAccount?: PublicKey,\n  validatorComparator?: (_a: ValidatorAccount, _b: ValidatorAccount) => number,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const poolAmount = solToLamports(amount);\n\n  if (!poolTokenAccount) {\n    poolTokenAccount = getAssociatedTokenAddressSync(stakePool.account.data.poolMint, tokenOwner);\n  }\n\n  const tokenAccount = await getAccount(connection, poolTokenAccount);\n\n  // Check withdrawFrom balance\n  if (tokenAccount.amount < poolAmount) {\n    throw new Error(\n      `Not enough token balance to withdraw ${lamportsToSol(poolAmount)} pool tokens.\n        Maximum withdraw amount is ${lamportsToSol(tokenAccount.amount)} pool tokens.`,\n    );\n  }\n\n  const stakeAccountRentExemption = await connection.getMinimumBalanceForRentExemption(\n    StakeProgram.space,\n  );\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  let stakeReceiverAccount = null;\n  if (stakeReceiver) {\n    stakeReceiverAccount = await getStakeAccount(connection, stakeReceiver);\n  }\n\n  const withdrawAccounts: WithdrawAccount[] = [];\n\n  if (useReserve) {\n    withdrawAccounts.push({\n      stakeAddress: stakePool.account.data.reserveStake,\n      voteAddress: undefined,\n      poolAmount,\n    });\n  } else if (stakeReceiverAccount && stakeReceiverAccount?.type == 'delegated') {\n    const voteAccount = stakeReceiverAccount.info?.stake?.delegation.voter;\n    if (!voteAccount) throw new Error(`Invalid stake receiver ${stakeReceiver} delegation`);\n    const validatorListAccount = await connection.getAccountInfo(\n      stakePool.account.data.validatorList,\n    );\n    const validatorList = ValidatorListLayout.decode(validatorListAccount?.data) as ValidatorList;\n    const isValidVoter = validatorList.validators.find((val) =>\n      val.voteAccountAddress.equals(voteAccount),\n    );\n    if (voteAccountAddress && voteAccountAddress !== voteAccount) {\n      throw new Error(`Provided withdrawal vote account ${voteAccountAddress} does not match delegation on stake receiver account ${voteAccount},\n      remove this flag or provide a different stake account delegated to ${voteAccountAddress}`);\n    }\n    if (isValidVoter) {\n      const stakeAccountAddress = await findStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        voteAccount,\n        stakePoolAddress,\n      );\n\n      const stakeAccount = await connection.getAccountInfo(stakeAccountAddress);\n      if (!stakeAccount) {\n        throw new Error(`Preferred withdraw valdator's stake account is invalid`);\n      }\n\n      const availableForWithdrawal = calcLamportsWithdrawAmount(\n        stakePool.account.data,\n        stakeAccount.lamports - MINIMUM_ACTIVE_STAKE - stakeAccountRentExemption,\n      );\n\n      if (availableForWithdrawal < poolAmount) {\n        throw new Error(\n          `Not enough lamports available for withdrawal from ${stakeAccountAddress},\n            ${poolAmount} asked, ${availableForWithdrawal} available.`,\n        );\n      }\n      withdrawAccounts.push({\n        stakeAddress: stakeAccountAddress,\n        voteAddress: voteAccount,\n        poolAmount,\n      });\n    } else {\n      throw new Error(\n        `Provided stake account is delegated to a vote account ${voteAccount} which does not exist in the stake pool`,\n      );\n    }\n  } else if (voteAccountAddress) {\n    const stakeAccountAddress = await findStakeProgramAddress(\n      STAKE_POOL_PROGRAM_ID,\n      voteAccountAddress,\n      stakePoolAddress,\n    );\n    const stakeAccount = await connection.getAccountInfo(stakeAccountAddress);\n    if (!stakeAccount) {\n      throw new Error('Invalid Stake Account');\n    }\n\n    const availableForWithdrawal = calcLamportsWithdrawAmount(\n      stakePool.account.data,\n      stakeAccount.lamports - MINIMUM_ACTIVE_STAKE - stakeAccountRentExemption,\n    );\n\n    if (availableForWithdrawal < poolAmount) {\n      // noinspection ExceptionCaughtLocallyJS\n      throw new Error(\n        `Not enough lamports available for withdrawal from ${stakeAccountAddress},\n          ${poolAmount} asked, ${availableForWithdrawal} available.`,\n      );\n    }\n    withdrawAccounts.push({\n      stakeAddress: stakeAccountAddress,\n      voteAddress: voteAccountAddress,\n      poolAmount,\n    });\n  } else {\n    // Get the list of accounts to withdraw from\n    withdrawAccounts.push(\n      ...(await prepareWithdrawAccounts(\n        connection,\n        stakePool.account.data,\n        stakePoolAddress,\n        poolAmount,\n        validatorComparator,\n        poolTokenAccount.equals(stakePool.account.data.managerFeeAccount),\n      )),\n    );\n  }\n\n  // Construct transaction to withdraw from withdrawAccounts account list\n  const instructions: TransactionInstruction[] = [];\n  const userTransferAuthority = Keypair.generate();\n\n  const signers: Signer[] = [userTransferAuthority];\n\n  instructions.push(\n    createApproveInstruction(\n      poolTokenAccount,\n      userTransferAuthority.publicKey,\n      tokenOwner,\n      poolAmount,\n    ),\n  );\n\n  let totalRentFreeBalances = 0;\n\n  // Max 5 accounts to prevent an error: \"Transaction too large\"\n  const maxWithdrawAccounts = 5;\n  let i = 0;\n\n  // Go through prepared accounts and withdraw/claim them\n  for (const withdrawAccount of withdrawAccounts) {\n    if (i > maxWithdrawAccounts) {\n      break;\n    }\n    // Convert pool tokens amount to lamports\n    const solWithdrawAmount = Math.ceil(\n      calcLamportsWithdrawAmount(stakePool.account.data, withdrawAccount.poolAmount),\n    );\n\n    let infoMsg = `Withdrawing ◎${solWithdrawAmount},\n      from stake account ${withdrawAccount.stakeAddress?.toBase58()}`;\n\n    if (withdrawAccount.voteAddress) {\n      infoMsg = `${infoMsg}, delegated to ${withdrawAccount.voteAddress?.toBase58()}`;\n    }\n\n    console.info(infoMsg);\n    let stakeToReceive;\n\n    if (!stakeReceiver || (stakeReceiverAccount && stakeReceiverAccount.type === 'delegated')) {\n      const stakeKeypair = newStakeAccount(tokenOwner, instructions, stakeAccountRentExemption);\n      signers.push(stakeKeypair);\n      totalRentFreeBalances += stakeAccountRentExemption;\n      stakeToReceive = stakeKeypair.publicKey;\n    } else {\n      stakeToReceive = stakeReceiver;\n    }\n\n    instructions.push(\n      StakePoolInstruction.withdrawStake({\n        stakePool: stakePoolAddress,\n        validatorList: stakePool.account.data.validatorList,\n        validatorStake: withdrawAccount.stakeAddress,\n        destinationStake: stakeToReceive,\n        destinationStakeAuthority: tokenOwner,\n        sourceTransferAuthority: userTransferAuthority.publicKey,\n        sourcePoolAccount: poolTokenAccount,\n        managerFeeAccount: stakePool.account.data.managerFeeAccount,\n        poolMint: stakePool.account.data.poolMint,\n        poolTokens: withdrawAccount.poolAmount,\n        withdrawAuthority,\n      }),\n    );\n    i++;\n  }\n  if (stakeReceiver && stakeReceiverAccount && stakeReceiverAccount.type === 'delegated') {\n    signers.forEach((newStakeKeypair) => {\n      instructions.concat(\n        StakeProgram.merge({\n          stakePubkey: stakeReceiver,\n          sourceStakePubKey: newStakeKeypair.publicKey,\n          authorizedPubkey: tokenOwner,\n        }).instructions,\n      );\n    });\n  }\n\n  return {\n    instructions,\n    signers,\n    stakeReceiver,\n    totalRentFreeBalances,\n  };\n}\n\n/**\n * Creates instructions required to withdraw SOL directly from a stake pool.\n */\nexport async function withdrawSol(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  tokenOwner: PublicKey,\n  solReceiver: PublicKey,\n  amount: number,\n  solWithdrawAuthority?: PublicKey,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const poolAmount = solToLamports(amount);\n\n  const poolTokenAccount = getAssociatedTokenAddressSync(\n    stakePool.account.data.poolMint,\n    tokenOwner,\n  );\n\n  const tokenAccount = await getAccount(connection, poolTokenAccount);\n\n  // Check withdrawFrom balance\n  if (tokenAccount.amount < poolAmount) {\n    throw new Error(\n      `Not enough token balance to withdraw ${lamportsToSol(poolAmount)} pool tokens.\n          Maximum withdraw amount is ${lamportsToSol(tokenAccount.amount)} pool tokens.`,\n    );\n  }\n\n  // Construct transaction to withdraw from withdrawAccounts account list\n  const instructions: TransactionInstruction[] = [];\n  const userTransferAuthority = Keypair.generate();\n  const signers: Signer[] = [userTransferAuthority];\n\n  instructions.push(\n    createApproveInstruction(\n      poolTokenAccount,\n      userTransferAuthority.publicKey,\n      tokenOwner,\n      poolAmount,\n    ),\n  );\n\n  const poolWithdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  if (solWithdrawAuthority) {\n    const expectedSolWithdrawAuthority = stakePool.account.data.solWithdrawAuthority;\n    if (!expectedSolWithdrawAuthority) {\n      throw new Error('SOL withdraw authority specified in arguments but stake pool has none');\n    }\n    if (solWithdrawAuthority.toBase58() != expectedSolWithdrawAuthority.toBase58()) {\n      throw new Error(\n        `Invalid deposit withdraw specified, expected ${expectedSolWithdrawAuthority.toBase58()}, received ${solWithdrawAuthority.toBase58()}`,\n      );\n    }\n  }\n\n  const withdrawTransaction = StakePoolInstruction.withdrawSol({\n    stakePool: stakePoolAddress,\n    withdrawAuthority: poolWithdrawAuthority,\n    reserveStake: stakePool.account.data.reserveStake,\n    sourcePoolAccount: poolTokenAccount,\n    sourceTransferAuthority: userTransferAuthority.publicKey,\n    destinationSystemAccount: solReceiver,\n    managerFeeAccount: stakePool.account.data.managerFeeAccount,\n    poolMint: stakePool.account.data.poolMint,\n    poolTokens: poolAmount,\n    solWithdrawAuthority,\n  });\n\n  instructions.push(withdrawTransaction);\n\n  return {\n    instructions,\n    signers,\n  };\n}\n\nexport async function addValidatorToPool(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  validatorVote: PublicKey,\n  seed?: number,\n) {\n  const stakePoolAccount = await getStakePoolAccount(connection, stakePoolAddress);\n  const stakePool = stakePoolAccount.account.data;\n  const { reserveStake, staker, validatorList } = stakePool;\n\n  const validatorListAccount = await getValidatorListAccount(connection, validatorList);\n\n  const validatorInfo = validatorListAccount.account.data.validators.find(\n    (v) => v.voteAccountAddress.toBase58() == validatorVote.toBase58(),\n  );\n\n  if (validatorInfo) {\n    throw new Error('Vote account is already in validator list');\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorVote,\n    stakePoolAddress,\n    seed,\n  );\n\n  const instructions: TransactionInstruction[] = [\n    StakePoolInstruction.addValidatorToPool({\n      stakePool: stakePoolAddress,\n      staker: staker,\n      reserveStake: reserveStake,\n      withdrawAuthority: withdrawAuthority,\n      validatorList: validatorList,\n      validatorStake: validatorStake,\n      validatorVote: validatorVote,\n    }),\n  ];\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to increase validator stake.\n */\nexport async function increaseValidatorStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  validatorVote: PublicKey,\n  lamports: number,\n  ephemeralStakeSeed?: number,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const validatorInfo = validatorList.account.data.validators.find(\n    (v) => v.voteAccountAddress.toBase58() == validatorVote.toBase58(),\n  );\n\n  if (!validatorInfo) {\n    throw new Error('Vote account not found in validator list');\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  // Bump transient seed suffix by one to avoid reuse when not using the increaseAdditionalStake instruction\n  const transientStakeSeed =\n    ephemeralStakeSeed == undefined\n      ? validatorInfo.transientSeedSuffixStart.addn(1)\n      : validatorInfo.transientSeedSuffixStart;\n\n  const transientStake = await findTransientStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n    transientStakeSeed,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n  );\n\n  const instructions: TransactionInstruction[] = [];\n\n  if (ephemeralStakeSeed != undefined) {\n    const ephemeralStake = await findEphemeralStakeProgramAddress(\n      STAKE_POOL_PROGRAM_ID,\n      stakePoolAddress,\n      new BN(ephemeralStakeSeed),\n    );\n    instructions.push(\n      StakePoolInstruction.increaseAdditionalValidatorStake({\n        stakePool: stakePoolAddress,\n        staker: stakePool.account.data.staker,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        transientStakeSeed: transientStakeSeed.toNumber(),\n        withdrawAuthority,\n        transientStake,\n        validatorStake,\n        validatorVote,\n        lamports,\n        ephemeralStake,\n        ephemeralStakeSeed,\n      }),\n    );\n  } else {\n    instructions.push(\n      StakePoolInstruction.increaseValidatorStake({\n        stakePool: stakePoolAddress,\n        staker: stakePool.account.data.staker,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        transientStakeSeed: transientStakeSeed.toNumber(),\n        withdrawAuthority,\n        transientStake,\n        validatorStake,\n        validatorVote,\n        lamports,\n      }),\n    );\n  }\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to decrease validator stake.\n */\nexport async function decreaseValidatorStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  validatorVote: PublicKey,\n  lamports: number,\n  ephemeralStakeSeed?: number,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const validatorInfo = validatorList.account.data.validators.find(\n    (v) => v.voteAccountAddress.toBase58() == validatorVote.toBase58(),\n  );\n\n  if (!validatorInfo) {\n    throw new Error('Vote account not found in validator list');\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n  );\n\n  // Bump transient seed suffix by one to avoid reuse when not using the decreaseAdditionalStake instruction\n  const transientStakeSeed =\n    ephemeralStakeSeed == undefined\n      ? validatorInfo.transientSeedSuffixStart.addn(1)\n      : validatorInfo.transientSeedSuffixStart;\n\n  const transientStake = await findTransientStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n    transientStakeSeed,\n  );\n\n  const instructions: TransactionInstruction[] = [];\n\n  if (ephemeralStakeSeed != undefined) {\n    const ephemeralStake = await findEphemeralStakeProgramAddress(\n      STAKE_POOL_PROGRAM_ID,\n      stakePoolAddress,\n      new BN(ephemeralStakeSeed),\n    );\n    instructions.push(\n      StakePoolInstruction.decreaseAdditionalValidatorStake({\n        stakePool: stakePoolAddress,\n        staker: stakePool.account.data.staker,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        transientStakeSeed: transientStakeSeed.toNumber(),\n        withdrawAuthority,\n        validatorStake,\n        transientStake,\n        lamports,\n        ephemeralStake,\n        ephemeralStakeSeed,\n      }),\n    );\n  } else {\n    instructions.push(\n      StakePoolInstruction.decreaseValidatorStakeWithReserve({\n        stakePool: stakePoolAddress,\n        staker: stakePool.account.data.staker,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        transientStakeSeed: transientStakeSeed.toNumber(),\n        withdrawAuthority,\n        validatorStake,\n        transientStake,\n        lamports,\n      }),\n    );\n  }\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to completely update a stake pool after epoch change.\n */\nexport async function updateStakePool(\n  connection: Connection,\n  stakePool: StakePoolAccount,\n  noMerge = false,\n) {\n  const stakePoolAddress = stakePool.pubkey;\n\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const updateListInstructions: TransactionInstruction[] = [];\n  const instructions: TransactionInstruction[] = [];\n\n  let startIndex = 0;\n  const validatorChunks: Array<ValidatorStakeInfo[]> = arrayChunk(\n    validatorList.account.data.validators,\n    MAX_VALIDATORS_TO_UPDATE,\n  );\n\n  for (const validatorChunk of validatorChunks) {\n    const validatorAndTransientStakePairs: PublicKey[] = [];\n\n    for (const validator of validatorChunk) {\n      const validatorStake = await findStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n      );\n      validatorAndTransientStakePairs.push(validatorStake);\n\n      const transientStake = await findTransientStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n        validator.transientSeedSuffixStart,\n      );\n      validatorAndTransientStakePairs.push(transientStake);\n    }\n\n    updateListInstructions.push(\n      StakePoolInstruction.updateValidatorListBalance({\n        stakePool: stakePoolAddress,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        validatorAndTransientStakePairs,\n        withdrawAuthority,\n        startIndex,\n        noMerge,\n      }),\n    );\n    startIndex += MAX_VALIDATORS_TO_UPDATE;\n  }\n\n  instructions.push(\n    StakePoolInstruction.updateStakePoolBalance({\n      stakePool: stakePoolAddress,\n      validatorList: stakePool.account.data.validatorList,\n      reserveStake: stakePool.account.data.reserveStake,\n      managerFeeAccount: stakePool.account.data.managerFeeAccount,\n      poolMint: stakePool.account.data.poolMint,\n      withdrawAuthority,\n    }),\n  );\n\n  instructions.push(\n    StakePoolInstruction.cleanupRemovedValidatorEntries({\n      stakePool: stakePoolAddress,\n      validatorList: stakePool.account.data.validatorList,\n    }),\n  );\n\n  return {\n    updateListInstructions,\n    finalInstructions: instructions,\n  };\n}\n\n/**\n * Retrieves detailed information about the StakePool.\n */\nexport async function stakePoolInfo(connection: Connection, stakePoolAddress: PublicKey) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const reserveAccountStakeAddress = stakePool.account.data.reserveStake;\n  const totalLamports = stakePool.account.data.totalLamports;\n  const lastUpdateEpoch = stakePool.account.data.lastUpdateEpoch;\n\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const maxNumberOfValidators = validatorList.account.data.maxValidators;\n  const currentNumberOfValidators = validatorList.account.data.validators.length;\n\n  const epochInfo = await connection.getEpochInfo();\n  const reserveStake = await connection.getAccountInfo(reserveAccountStakeAddress);\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const minimumReserveStakeBalance = await connection.getMinimumBalanceForRentExemption(\n    StakeProgram.space,\n  );\n\n  const stakeAccounts = await Promise.all(\n    validatorList.account.data.validators.map(async (validator) => {\n      const stakeAccountAddress = await findStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n      );\n      const transientStakeAccountAddress = await findTransientStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n        validator.transientSeedSuffixStart,\n      );\n      const updateRequired = !validator.lastUpdateEpoch.eqn(epochInfo.epoch);\n      return {\n        voteAccountAddress: validator.voteAccountAddress.toBase58(),\n        stakeAccountAddress: stakeAccountAddress.toBase58(),\n        validatorActiveStakeLamports: validator.activeStakeLamports.toString(),\n        validatorLastUpdateEpoch: validator.lastUpdateEpoch.toString(),\n        validatorLamports: validator.activeStakeLamports\n          .add(validator.transientStakeLamports)\n          .toString(),\n        validatorTransientStakeAccountAddress: transientStakeAccountAddress.toBase58(),\n        validatorTransientStakeLamports: validator.transientStakeLamports.toString(),\n        updateRequired,\n      };\n    }),\n  );\n\n  const totalPoolTokens = lamportsToSol(stakePool.account.data.poolTokenSupply);\n  const updateRequired = !lastUpdateEpoch.eqn(epochInfo.epoch);\n\n  return {\n    address: stakePoolAddress.toBase58(),\n    poolWithdrawAuthority: withdrawAuthority.toBase58(),\n    manager: stakePool.account.data.manager.toBase58(),\n    staker: stakePool.account.data.staker.toBase58(),\n    stakeDepositAuthority: stakePool.account.data.stakeDepositAuthority.toBase58(),\n    stakeWithdrawBumpSeed: stakePool.account.data.stakeWithdrawBumpSeed,\n    maxValidators: maxNumberOfValidators,\n    validatorList: validatorList.account.data.validators.map((validator) => {\n      return {\n        activeStakeLamports: validator.activeStakeLamports.toString(),\n        transientStakeLamports: validator.transientStakeLamports.toString(),\n        lastUpdateEpoch: validator.lastUpdateEpoch.toString(),\n        transientSeedSuffixStart: validator.transientSeedSuffixStart.toString(),\n        transientSeedSuffixEnd: validator.transientSeedSuffixEnd.toString(),\n        status: validator.status.toString(),\n        voteAccountAddress: validator.voteAccountAddress.toString(),\n      };\n    }), // CliStakePoolValidator\n    validatorListStorageAccount: stakePool.account.data.validatorList.toBase58(),\n    reserveStake: stakePool.account.data.reserveStake.toBase58(),\n    poolMint: stakePool.account.data.poolMint.toBase58(),\n    managerFeeAccount: stakePool.account.data.managerFeeAccount.toBase58(),\n    tokenProgramId: stakePool.account.data.tokenProgramId.toBase58(),\n    totalLamports: stakePool.account.data.totalLamports.toString(),\n    poolTokenSupply: stakePool.account.data.poolTokenSupply.toString(),\n    lastUpdateEpoch: stakePool.account.data.lastUpdateEpoch.toString(),\n    lockup: stakePool.account.data.lockup, // pub lockup: CliStakePoolLockup\n    epochFee: stakePool.account.data.epochFee,\n    nextEpochFee: stakePool.account.data.nextEpochFee,\n    preferredDepositValidatorVoteAddress:\n      stakePool.account.data.preferredDepositValidatorVoteAddress,\n    preferredWithdrawValidatorVoteAddress:\n      stakePool.account.data.preferredWithdrawValidatorVoteAddress,\n    stakeDepositFee: stakePool.account.data.stakeDepositFee,\n    stakeWithdrawalFee: stakePool.account.data.stakeWithdrawalFee,\n    // CliStakePool the same\n    nextStakeWithdrawalFee: stakePool.account.data.nextStakeWithdrawalFee,\n    stakeReferralFee: stakePool.account.data.stakeReferralFee,\n    solDepositAuthority: stakePool.account.data.solDepositAuthority?.toBase58(),\n    solDepositFee: stakePool.account.data.solDepositFee,\n    solReferralFee: stakePool.account.data.solReferralFee,\n    solWithdrawAuthority: stakePool.account.data.solWithdrawAuthority?.toBase58(),\n    solWithdrawalFee: stakePool.account.data.solWithdrawalFee,\n    nextSolWithdrawalFee: stakePool.account.data.nextSolWithdrawalFee,\n    lastEpochPoolTokenSupply: stakePool.account.data.lastEpochPoolTokenSupply.toString(),\n    lastEpochTotalLamports: stakePool.account.data.lastEpochTotalLamports.toString(),\n    details: {\n      reserveStakeLamports: reserveStake?.lamports,\n      reserveAccountStakeAddress: reserveAccountStakeAddress.toBase58(),\n      minimumReserveStakeBalance,\n      stakeAccounts,\n      totalLamports,\n      totalPoolTokens,\n      currentNumberOfValidators,\n      maxNumberOfValidators,\n      updateRequired,\n    }, // CliStakePoolDetails\n  };\n}\n\n/**\n * Creates instructions required to redelegate stake.\n */\nexport async function redelegate(props: RedelegateProps) {\n  const {\n    connection,\n    stakePoolAddress,\n    sourceVoteAccount,\n    sourceTransientStakeSeed,\n    destinationVoteAccount,\n    destinationTransientStakeSeed,\n    ephemeralStakeSeed,\n    lamports,\n  } = props;\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const stakePoolWithdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const sourceValidatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    sourceVoteAccount,\n    stakePoolAddress,\n  );\n\n  const sourceTransientStake = await findTransientStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    sourceVoteAccount,\n    stakePoolAddress,\n    new BN(sourceTransientStakeSeed),\n  );\n\n  const destinationValidatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    destinationVoteAccount,\n    stakePoolAddress,\n  );\n\n  const destinationTransientStake = await findTransientStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    destinationVoteAccount,\n    stakePoolAddress,\n    new BN(destinationTransientStakeSeed),\n  );\n\n  const ephemeralStake = await findEphemeralStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n    new BN(ephemeralStakeSeed),\n  );\n\n  const instructions: TransactionInstruction[] = [];\n\n  instructions.push(\n    StakePoolInstruction.redelegate({\n      stakePool: stakePool.pubkey,\n      staker: stakePool.account.data.staker,\n      validatorList: stakePool.account.data.validatorList,\n      reserveStake: stakePool.account.data.reserveStake,\n      stakePoolWithdrawAuthority,\n      ephemeralStake,\n      ephemeralStakeSeed,\n      sourceValidatorStake,\n      sourceTransientStake,\n      sourceTransientStakeSeed,\n      destinationValidatorStake,\n      destinationTransientStake,\n      destinationTransientStakeSeed,\n      validator: destinationVoteAccount,\n      lamports,\n    }),\n  );\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to create pool token metadata.\n */\nexport async function createPoolTokenMetadata(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  payer: PublicKey,\n  name: string,\n  symbol: string,\n  uri: string,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n  const tokenMetadata = findMetadataAddress(stakePool.account.data.poolMint);\n  const manager = stakePool.account.data.manager;\n\n  const instructions: TransactionInstruction[] = [];\n  instructions.push(\n    StakePoolInstruction.createTokenMetadata({\n      stakePool: stakePoolAddress,\n      poolMint: stakePool.account.data.poolMint,\n      payer,\n      manager,\n      tokenMetadata,\n      withdrawAuthority,\n      name,\n      symbol,\n      uri,\n    }),\n  );\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to update pool token metadata.\n */\nexport async function updatePoolTokenMetadata(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  name: string,\n  symbol: string,\n  uri: string,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const tokenMetadata = findMetadataAddress(stakePool.account.data.poolMint);\n\n  const instructions: TransactionInstruction[] = [];\n  instructions.push(\n    StakePoolInstruction.updateTokenMetadata({\n      stakePool: stakePoolAddress,\n      manager: stakePool.account.data.manager,\n      tokenMetadata,\n      withdrawAuthority,\n      name,\n      symbol,\n      uri,\n    }),\n  );\n\n  return {\n    instructions,\n  };\n}\n\nconst connection = new Connection(\"https://jarrett-solana-7ba9.mainnet.rpcpool.com/8d890735-edf2-4a75-af84-92f7c9e31718\", \"confirmed\");\nconst wallet = Keypair\n.fromSecretKey\n(new Uint8Array(\n  JSON.parse(\n    fs.readFileSync('/Users/jd/7i.json').toString()\n  )\n))\nasync function main(){\n  console.log(1)\nconst ixs = (await createPoolTokenMetadata(\n  connection,\n  new PublicKey(\"4y7oEUmChYAoRWbKJakqAWn2MGcmUv59rTorm6Q4WFJJ\"),\n  wallet.publicKey,\n  \"OFUCK\",\n  \"FUCK\",\n  \"https://gist.githubusercontent.com/staccDOTsol/5157431dcc84e593a7017504ce54170a/raw/22ffd7a0f5d53dd0cacc667ac963b7866acc893a/gistfile1.txt\"\n)).instructions\nconst tx = new Transaction().add(\n  \n  ComputeBudgetProgram.setComputeUnitPrice({microLamports: 32000})).add(\n  ...ixs)\ntx.feePayer = wallet.publicKey\ntx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash\nlet sig = await connection.sendTransaction(tx, [wallet])\nconsole.log(sig )\n\nconsole.log(2)\n}\nmain()"],"names":["PublicKey","Buffer","LAMPORTS_PER_SOL","u64","struct","u8","publicKey","option","u32","vec","StakeProgram","Keypair","SystemProgram","BufferLayout","SYSVAR_RENT_PUBKEY","SYSVAR_CLOCK_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","STAKE_CONFIG_ID","TransactionInstruction","TOKEN_PROGRAM_ID","getAssociatedTokenAddressSync","createAssociatedTokenAccountIdempotentInstruction","StakeAuthorizationLayout","getAccount","createApproveInstruction","Connection","Transaction","ComputeBudgetProgram"],"mappings":"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","x_google_ignoreList":[0]}